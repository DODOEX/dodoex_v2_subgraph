// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class DodoZoo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DodoZoo entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DodoZoo entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DodoZoo", id.toString(), this);
  }

  static load(id: string): DodoZoo | null {
    return store.get("DodoZoo", id) as DodoZoo | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pairCount(): BigInt {
    let value = this.get("pairCount");
    return value.toBigInt();
  }

  set pairCount(value: BigInt) {
    this.set("pairCount", Value.fromBigInt(value));
  }

  get tokenCount(): BigInt {
    let value = this.get("tokenCount");
    return value.toBigInt();
  }

  set tokenCount(value: BigInt) {
    this.set("tokenCount", Value.fromBigInt(value));
  }

  get crowdpoolingCount(): BigInt {
    let value = this.get("crowdpoolingCount");
    return value.toBigInt();
  }

  set crowdpoolingCount(value: BigInt) {
    this.set("crowdpoolingCount", Value.fromBigInt(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }
}

export class DodoDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DodoDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DodoDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DodoDayData", id.toString(), this);
  }

  static load(id: string): DodoDayData | null {
    return store.get("DodoDayData", id) as DodoDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get uniqueUsersCount(): BigInt {
    let value = this.get("uniqueUsersCount");
    return value.toBigInt();
  }

  set uniqueUsersCount(value: BigInt) {
    this.set("uniqueUsersCount", Value.fromBigInt(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get sender(): string {
    let value = this.get("sender");
    return value.toString();
  }

  set sender(value: string) {
    this.set("sender", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get tradingRewardRecieved(): BigDecimal {
    let value = this.get("tradingRewardRecieved");
    return value.toBigDecimal();
  }

  set tradingRewardRecieved(value: BigDecimal) {
    this.set("tradingRewardRecieved", Value.fromBigDecimal(value));
  }

  get liquidityPositions(): Array<string> | null {
    let value = this.get("liquidityPositions");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set liquidityPositions(value: Array<string> | null) {
    if (value === null) {
      this.unset("liquidityPositions");
    } else {
      this.set(
        "liquidityPositions",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UserDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UserDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserDayData", id.toString(), this);
  }

  static load(id: string): UserDayData | null {
    return store.get("UserDayData", id) as UserDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get tradeCount(): BigInt {
    let value = this.get("tradeCount");
    return value.toBigInt();
  }

  set tradeCount(value: BigInt) {
    this.set("tradeCount", Value.fromBigInt(value));
  }

  get addLPCount(): BigInt {
    let value = this.get("addLPCount");
    return value.toBigInt();
  }

  set addLPCount(value: BigInt) {
    this.set("addLPCount", Value.fromBigInt(value));
  }

  get removeLPCount(): BigInt {
    let value = this.get("removeLPCount");
    return value.toBigInt();
  }

  set removeLPCount(value: BigInt) {
    this.set("removeLPCount", Value.fromBigInt(value));
  }

  get bidCount(): BigInt {
    let value = this.get("bidCount");
    return value.toBigInt();
  }

  set bidCount(value: BigInt) {
    this.set("bidCount", Value.fromBigInt(value));
  }

  get cancelCount(): BigInt {
    let value = this.get("cancelCount");
    return value.toBigInt();
  }

  set cancelCount(value: BigInt) {
    this.set("cancelCount", Value.fromBigInt(value));
  }

  get claimCount(): BigInt {
    let value = this.get("claimCount");
    return value.toBigInt();
  }

  set claimCount(value: BigInt) {
    this.set("claimCount", Value.fromBigInt(value));
  }
}

export class LiquidityPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LiquidityPosition entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiquidityPosition entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiquidityPosition", id.toString(), this);
  }

  static load(id: string): LiquidityPosition | null {
    return store.get("LiquidityPosition", id) as LiquidityPosition | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (value === null) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(value as string));
    }
  }

  get lpToken(): string {
    let value = this.get("lpToken");
    return value.toString();
  }

  set lpToken(value: string) {
    this.set("lpToken", Value.fromString(value));
  }

  get liquidityTokenBalance(): BigDecimal {
    let value = this.get("liquidityTokenBalance");
    return value.toBigDecimal();
  }

  set liquidityTokenBalance(value: BigDecimal) {
    this.set("liquidityTokenBalance", Value.fromBigDecimal(value));
  }

  get liquidityTokenInMining(): BigDecimal {
    let value = this.get("liquidityTokenInMining");
    return value.toBigDecimal();
  }

  set liquidityTokenInMining(value: BigDecimal) {
    this.set("liquidityTokenInMining", Value.fromBigDecimal(value));
  }

  get lastTxTime(): BigInt {
    let value = this.get("lastTxTime");
    return value.toBigInt();
  }

  set lastTxTime(value: BigInt) {
    this.set("lastTxTime", Value.fromBigInt(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get untrackedVolume(): BigDecimal {
    let value = this.get("untrackedVolume");
    return value.toBigDecimal();
  }

  set untrackedVolume(value: BigDecimal) {
    this.set("untrackedVolume", Value.fromBigDecimal(value));
  }

  get tradeVolume(): BigDecimal {
    let value = this.get("tradeVolume");
    return value.toBigDecimal();
  }

  set tradeVolume(value: BigDecimal) {
    this.set("tradeVolume", Value.fromBigDecimal(value));
  }

  get tradeVolumeBridge(): BigDecimal {
    let value = this.get("tradeVolumeBridge");
    return value.toBigDecimal();
  }

  set tradeVolumeBridge(value: BigDecimal) {
    this.set("tradeVolumeBridge", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get volumeUSDBridge(): BigDecimal {
    let value = this.get("volumeUSDBridge");
    return value.toBigDecimal();
  }

  set volumeUSDBridge(value: BigDecimal) {
    this.set("volumeUSDBridge", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get traderCount(): BigInt {
    let value = this.get("traderCount");
    return value.toBigInt();
  }

  set traderCount(value: BigInt) {
    this.set("traderCount", Value.fromBigInt(value));
  }

  get totalLiquidityOnDODO(): BigDecimal {
    let value = this.get("totalLiquidityOnDODO");
    return value.toBigDecimal();
  }

  set totalLiquidityOnDODO(value: BigDecimal) {
    this.set("totalLiquidityOnDODO", Value.fromBigDecimal(value));
  }

  get usdPrice(): BigDecimal {
    let value = this.get("usdPrice");
    return value.toBigDecimal();
  }

  set usdPrice(value: BigDecimal) {
    this.set("usdPrice", Value.fromBigDecimal(value));
  }

  get priceUpdateTimestamp(): BigInt {
    let value = this.get("priceUpdateTimestamp");
    return value.toBigInt();
  }

  set priceUpdateTimestamp(value: BigInt) {
    this.set("priceUpdateTimestamp", Value.fromBigInt(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class TokenTrader extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenTrader entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenTrader entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenTrader", id.toString(), this);
  }

  static load(id: string): TokenTrader | null {
    return store.get("TokenTrader", id) as TokenTrader | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get trader(): string {
    let value = this.get("trader");
    return value.toString();
  }

  set trader(value: string) {
    this.set("trader", Value.fromString(value));
  }

  get lastTxTime(): BigInt {
    let value = this.get("lastTxTime");
    return value.toBigInt();
  }

  set lastTxTime(value: BigInt) {
    this.set("lastTxTime", Value.fromBigInt(value));
  }
}

export class LpToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LpToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LpToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LpToken", id.toString(), this);
  }

  static load(id: string): LpToken | null {
    return store.get("LpToken", id) as LpToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (value === null) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(value as string));
    }
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }
}

export class OrderHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OrderHistory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OrderHistory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OrderHistory", id.toString(), this);
  }

  static load(id: string): OrderHistory | null {
    return store.get("OrderHistory", id) as OrderHistory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get source(): string {
    let value = this.get("source");
    return value.toString();
  }

  set source(value: string) {
    this.set("source", Value.fromString(value));
  }

  get hash(): string {
    let value = this.get("hash");
    return value.toString();
  }

  set hash(value: string) {
    this.set("hash", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get fromToken(): string {
    let value = this.get("fromToken");
    return value.toString();
  }

  set fromToken(value: string) {
    this.set("fromToken", Value.fromString(value));
  }

  get toToken(): string {
    let value = this.get("toToken");
    return value.toString();
  }

  set toToken(value: string) {
    this.set("toToken", Value.fromString(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }

  get amountIn(): BigDecimal {
    let value = this.get("amountIn");
    return value.toBigDecimal();
  }

  set amountIn(value: BigDecimal) {
    this.set("amountIn", Value.fromBigDecimal(value));
  }

  get amountOut(): BigDecimal {
    let value = this.get("amountOut");
    return value.toBigDecimal();
  }

  set amountOut(value: BigDecimal) {
    this.set("amountOut", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get tradingReward(): BigDecimal {
    let value = this.get("tradingReward");
    return value.toBigDecimal();
  }

  set tradingReward(value: BigDecimal) {
    this.set("tradingReward", Value.fromBigDecimal(value));
  }
}

export class LiquidityHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LiquidityHistory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiquidityHistory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiquidityHistory", id.toString(), this);
  }

  static load(id: string): LiquidityHistory | null {
    return store.get("LiquidityHistory", id) as LiquidityHistory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get hash(): string {
    let value = this.get("hash");
    return value.toString();
  }

  set hash(value: string) {
    this.set("hash", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get lpToken(): string {
    let value = this.get("lpToken");
    return value.toString();
  }

  set lpToken(value: string) {
    this.set("lpToken", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get balance(): BigDecimal {
    let value = this.get("balance");
    return value.toBigDecimal();
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }

  get baseAmountChange(): BigDecimal | null {
    let value = this.get("baseAmountChange");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set baseAmountChange(value: BigDecimal | null) {
    if (value === null) {
      this.unset("baseAmountChange");
    } else {
      this.set("baseAmountChange", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get quoteAmountChange(): BigDecimal | null {
    let value = this.get("quoteAmountChange");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set quoteAmountChange(value: BigDecimal | null) {
    if (value === null) {
      this.unset("quoteAmountChange");
    } else {
      this.set("quoteAmountChange", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (value === null) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(value as string));
    }
  }

  get baseReserve(): BigDecimal | null {
    let value = this.get("baseReserve");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set baseReserve(value: BigDecimal | null) {
    if (value === null) {
      this.unset("baseReserve");
    } else {
      this.set("baseReserve", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get quoteReserve(): BigDecimal | null {
    let value = this.get("quoteReserve");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set quoteReserve(value: BigDecimal | null) {
    if (value === null) {
      this.unset("quoteReserve");
    } else {
      this.set("quoteReserve", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get lpTokenTotalSupply(): BigDecimal | null {
    let value = this.get("lpTokenTotalSupply");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set lpTokenTotalSupply(value: BigDecimal | null) {
    if (value === null) {
      this.unset("lpTokenTotalSupply");
    } else {
      this.set("lpTokenTotalSupply", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get baseTokenPrice(): BigDecimal | null {
    let value = this.get("baseTokenPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set baseTokenPrice(value: BigDecimal | null) {
    if (value === null) {
      this.unset("baseTokenPrice");
    } else {
      this.set("baseTokenPrice", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get quoteTokenPrice(): BigDecimal | null {
    let value = this.get("quoteTokenPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set quoteTokenPrice(value: BigDecimal | null) {
    if (value === null) {
      this.unset("quoteTokenPrice");
    } else {
      this.set("quoteTokenPrice", Value.fromBigDecimal(value as BigDecimal));
    }
  }
}

export class Pair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Pair entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pair entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pair", id.toString(), this);
  }

  static load(id: string): Pair | null {
    return store.get("Pair", id) as Pair | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get source(): string | null {
    let value = this.get("source");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set source(value: string | null) {
    if (value === null) {
      this.unset("source");
    } else {
      this.set("source", Value.fromString(value as string));
    }
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get baseToken(): string {
    let value = this.get("baseToken");
    return value.toString();
  }

  set baseToken(value: string) {
    this.set("baseToken", Value.fromString(value));
  }

  get quoteToken(): string {
    let value = this.get("quoteToken");
    return value.toString();
  }

  set quoteToken(value: string) {
    this.set("quoteToken", Value.fromString(value));
  }

  get i(): BigInt | null {
    let value = this.get("i");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set i(value: BigInt | null) {
    if (value === null) {
      this.unset("i");
    } else {
      this.set("i", Value.fromBigInt(value as BigInt));
    }
  }

  get k(): BigInt | null {
    let value = this.get("k");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set k(value: BigInt | null) {
    if (value === null) {
      this.unset("k");
    } else {
      this.set("k", Value.fromBigInt(value as BigInt));
    }
  }

  get lpFeeRate(): BigDecimal {
    let value = this.get("lpFeeRate");
    return value.toBigDecimal();
  }

  set lpFeeRate(value: BigDecimal) {
    this.set("lpFeeRate", Value.fromBigDecimal(value));
  }

  get baseLpToken(): string | null {
    let value = this.get("baseLpToken");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set baseLpToken(value: string | null) {
    if (value === null) {
      this.unset("baseLpToken");
    } else {
      this.set("baseLpToken", Value.fromString(value as string));
    }
  }

  get quoteLpToken(): string | null {
    let value = this.get("quoteLpToken");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set quoteLpToken(value: string | null) {
    if (value === null) {
      this.unset("quoteLpToken");
    } else {
      this.set("quoteLpToken", Value.fromString(value as string));
    }
  }

  get baseReserve(): BigDecimal {
    let value = this.get("baseReserve");
    return value.toBigDecimal();
  }

  set baseReserve(value: BigDecimal) {
    this.set("baseReserve", Value.fromBigDecimal(value));
  }

  get quoteReserve(): BigDecimal {
    let value = this.get("quoteReserve");
    return value.toBigDecimal();
  }

  set quoteReserve(value: BigDecimal) {
    this.set("quoteReserve", Value.fromBigDecimal(value));
  }

  get lastTradePrice(): BigDecimal {
    let value = this.get("lastTradePrice");
    return value.toBigDecimal();
  }

  set lastTradePrice(value: BigDecimal) {
    this.set("lastTradePrice", Value.fromBigDecimal(value));
  }

  get untrackedBaseVolume(): BigDecimal {
    let value = this.get("untrackedBaseVolume");
    return value.toBigDecimal();
  }

  set untrackedBaseVolume(value: BigDecimal) {
    this.set("untrackedBaseVolume", Value.fromBigDecimal(value));
  }

  get untrackedQuoteVolume(): BigDecimal {
    let value = this.get("untrackedQuoteVolume");
    return value.toBigDecimal();
  }

  set untrackedQuoteVolume(value: BigDecimal) {
    this.set("untrackedQuoteVolume", Value.fromBigDecimal(value));
  }

  get volumeBaseToken(): BigDecimal {
    let value = this.get("volumeBaseToken");
    return value.toBigDecimal();
  }

  set volumeBaseToken(value: BigDecimal) {
    this.set("volumeBaseToken", Value.fromBigDecimal(value));
  }

  get volumeQuoteToken(): BigDecimal {
    let value = this.get("volumeQuoteToken");
    return value.toBigDecimal();
  }

  set volumeQuoteToken(value: BigDecimal) {
    this.set("volumeQuoteToken", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get feeBase(): BigDecimal {
    let value = this.get("feeBase");
    return value.toBigDecimal();
  }

  set feeBase(value: BigDecimal) {
    this.set("feeBase", Value.fromBigDecimal(value));
  }

  get feeQuote(): BigDecimal {
    let value = this.get("feeQuote");
    return value.toBigDecimal();
  }

  set feeQuote(value: BigDecimal) {
    this.set("feeQuote", Value.fromBigDecimal(value));
  }

  get feeUSD(): BigDecimal {
    let value = this.get("feeUSD");
    return value.toBigDecimal();
  }

  set feeUSD(value: BigDecimal) {
    this.set("feeUSD", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get createdAtBlockNumber(): BigInt {
    let value = this.get("createdAtBlockNumber");
    return value.toBigInt();
  }

  set createdAtBlockNumber(value: BigInt) {
    this.set("createdAtBlockNumber", Value.fromBigInt(value));
  }

  get liquidityProviderCount(): BigInt {
    let value = this.get("liquidityProviderCount");
    return value.toBigInt();
  }

  set liquidityProviderCount(value: BigInt) {
    this.set("liquidityProviderCount", Value.fromBigInt(value));
  }

  get mtFeeRateModel(): Bytes {
    let value = this.get("mtFeeRateModel");
    return value.toBytes();
  }

  set mtFeeRateModel(value: Bytes) {
    this.set("mtFeeRateModel", Value.fromBytes(value));
  }

  get maintainer(): Bytes {
    let value = this.get("maintainer");
    return value.toBytes();
  }

  set maintainer(value: Bytes) {
    this.set("maintainer", Value.fromBytes(value));
  }

  get traderCount(): BigInt {
    let value = this.get("traderCount");
    return value.toBigInt();
  }

  set traderCount(value: BigInt) {
    this.set("traderCount", Value.fromBigInt(value));
  }

  get isTradeAllowed(): boolean {
    let value = this.get("isTradeAllowed");
    return value.toBoolean();
  }

  set isTradeAllowed(value: boolean) {
    this.set("isTradeAllowed", Value.fromBoolean(value));
  }

  get isDepositBaseAllowed(): boolean {
    let value = this.get("isDepositBaseAllowed");
    return value.toBoolean();
  }

  set isDepositBaseAllowed(value: boolean) {
    this.set("isDepositBaseAllowed", Value.fromBoolean(value));
  }

  get isDepositQuoteAllowed(): boolean {
    let value = this.get("isDepositQuoteAllowed");
    return value.toBoolean();
  }

  set isDepositQuoteAllowed(value: boolean) {
    this.set("isDepositQuoteAllowed", Value.fromBoolean(value));
  }
}

export class PairTrader extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PairTrader entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PairTrader entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PairTrader", id.toString(), this);
  }

  static load(id: string): PairTrader | null {
    return store.get("PairTrader", id) as PairTrader | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (value === null) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(value as string));
    }
  }

  get trader(): string {
    let value = this.get("trader");
    return value.toString();
  }

  set trader(value: string) {
    this.set("trader", Value.fromString(value));
  }

  get lastTxTime(): BigInt {
    let value = this.get("lastTxTime");
    return value.toBigInt();
  }

  set lastTxTime(value: BigInt) {
    this.set("lastTxTime", Value.fromBigInt(value));
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Swap entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Swap entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Swap", id.toString(), this);
  }

  static load(id: string): Swap | null {
    return store.get("Swap", id) as Swap | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): string {
    let value = this.get("hash");
    return value.toString();
  }

  set hash(value: string) {
    this.set("hash", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (value === null) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(value as string));
    }
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get fromToken(): string {
    let value = this.get("fromToken");
    return value.toString();
  }

  set fromToken(value: string) {
    this.set("fromToken", Value.fromString(value));
  }

  get toToken(): string {
    let value = this.get("toToken");
    return value.toString();
  }

  set toToken(value: string) {
    this.set("toToken", Value.fromString(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get amountIn(): BigDecimal {
    let value = this.get("amountIn");
    return value.toBigDecimal();
  }

  set amountIn(value: BigDecimal) {
    this.set("amountIn", Value.fromBigDecimal(value));
  }

  get amountOut(): BigDecimal {
    let value = this.get("amountOut");
    return value.toBigDecimal();
  }

  set amountOut(value: BigDecimal) {
    this.set("amountOut", Value.fromBigDecimal(value));
  }

  get feeBase(): BigDecimal {
    let value = this.get("feeBase");
    return value.toBigDecimal();
  }

  set feeBase(value: BigDecimal) {
    this.set("feeBase", Value.fromBigDecimal(value));
  }

  get feeQuote(): BigDecimal {
    let value = this.get("feeQuote");
    return value.toBigDecimal();
  }

  set feeQuote(value: BigDecimal) {
    this.set("feeQuote", Value.fromBigDecimal(value));
  }

  get baseVolume(): BigDecimal {
    let value = this.get("baseVolume");
    return value.toBigDecimal();
  }

  set baseVolume(value: BigDecimal) {
    this.set("baseVolume", Value.fromBigDecimal(value));
  }

  get quoteVolume(): BigDecimal {
    let value = this.get("quoteVolume");
    return value.toBigDecimal();
  }

  set quoteVolume(value: BigDecimal) {
    this.set("quoteVolume", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }
}

export class FlashLoan extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save FlashLoan entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FlashLoan entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FlashLoan", id.toString(), this);
  }

  static load(id: string): FlashLoan | null {
    return store.get("FlashLoan", id) as FlashLoan | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): string {
    let value = this.get("hash");
    return value.toString();
  }

  set hash(value: string) {
    this.set("hash", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (value === null) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(value as string));
    }
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get baseAmount(): BigDecimal {
    let value = this.get("baseAmount");
    return value.toBigDecimal();
  }

  set baseAmount(value: BigDecimal) {
    this.set("baseAmount", Value.fromBigDecimal(value));
  }

  get quoteAmount(): BigDecimal {
    let value = this.get("quoteAmount");
    return value.toBigDecimal();
  }

  set quoteAmount(value: BigDecimal) {
    this.set("quoteAmount", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }
}

export class PairDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PairDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PairDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PairDayData", id.toString(), this);
  }

  static load(id: string): PairDayData | null {
    return store.get("PairDayData", id) as PairDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get pairAddress(): Bytes {
    let value = this.get("pairAddress");
    return value.toBytes();
  }

  set pairAddress(value: Bytes) {
    this.set("pairAddress", Value.fromBytes(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (value === null) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(value as string));
    }
  }

  get baseToken(): string {
    let value = this.get("baseToken");
    return value.toString();
  }

  set baseToken(value: string) {
    this.set("baseToken", Value.fromString(value));
  }

  get quoteToken(): string {
    let value = this.get("quoteToken");
    return value.toString();
  }

  set quoteToken(value: string) {
    this.set("quoteToken", Value.fromString(value));
  }

  get baseTokenReserve(): BigDecimal {
    let value = this.get("baseTokenReserve");
    return value.toBigDecimal();
  }

  set baseTokenReserve(value: BigDecimal) {
    this.set("baseTokenReserve", Value.fromBigDecimal(value));
  }

  get quoteTokenReserve(): BigDecimal {
    let value = this.get("quoteTokenReserve");
    return value.toBigDecimal();
  }

  set quoteTokenReserve(value: BigDecimal) {
    this.set("quoteTokenReserve", Value.fromBigDecimal(value));
  }

  get baseLpTokenTotalSupply(): BigDecimal {
    let value = this.get("baseLpTokenTotalSupply");
    return value.toBigDecimal();
  }

  set baseLpTokenTotalSupply(value: BigDecimal) {
    this.set("baseLpTokenTotalSupply", Value.fromBigDecimal(value));
  }

  get quoteLpTokenTotalSupply(): BigDecimal {
    let value = this.get("quoteLpTokenTotalSupply");
    return value.toBigDecimal();
  }

  set quoteLpTokenTotalSupply(value: BigDecimal) {
    this.set("quoteLpTokenTotalSupply", Value.fromBigDecimal(value));
  }

  get untrackedBaseVolume(): BigDecimal {
    let value = this.get("untrackedBaseVolume");
    return value.toBigDecimal();
  }

  set untrackedBaseVolume(value: BigDecimal) {
    this.set("untrackedBaseVolume", Value.fromBigDecimal(value));
  }

  get untrackedQuoteVolume(): BigDecimal {
    let value = this.get("untrackedQuoteVolume");
    return value.toBigDecimal();
  }

  set untrackedQuoteVolume(value: BigDecimal) {
    this.set("untrackedQuoteVolume", Value.fromBigDecimal(value));
  }

  get volumeBase(): BigDecimal {
    let value = this.get("volumeBase");
    return value.toBigDecimal();
  }

  set volumeBase(value: BigDecimal) {
    this.set("volumeBase", Value.fromBigDecimal(value));
  }

  get volumeQuote(): BigDecimal {
    let value = this.get("volumeQuote");
    return value.toBigDecimal();
  }

  set volumeQuote(value: BigDecimal) {
    this.set("volumeQuote", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get txns(): BigInt {
    let value = this.get("txns");
    return value.toBigInt();
  }

  set txns(value: BigInt) {
    this.set("txns", Value.fromBigInt(value));
  }

  get traders(): BigInt {
    let value = this.get("traders");
    return value.toBigInt();
  }

  set traders(value: BigInt) {
    this.set("traders", Value.fromBigInt(value));
  }

  get feeBase(): BigDecimal {
    let value = this.get("feeBase");
    return value.toBigDecimal();
  }

  set feeBase(value: BigDecimal) {
    this.set("feeBase", Value.fromBigDecimal(value));
  }

  get feeQuote(): BigDecimal {
    let value = this.get("feeQuote");
    return value.toBigDecimal();
  }

  set feeQuote(value: BigDecimal) {
    this.set("feeQuote", Value.fromBigDecimal(value));
  }

  get lpFeeRate(): BigDecimal {
    let value = this.get("lpFeeRate");
    return value.toBigDecimal();
  }

  set lpFeeRate(value: BigDecimal) {
    this.set("lpFeeRate", Value.fromBigDecimal(value));
  }
}

export class PairHourData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PairHourData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PairHourData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PairHourData", id.toString(), this);
  }

  static load(id: string): PairHourData | null {
    return store.get("PairHourData", id) as PairHourData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hour(): i32 {
    let value = this.get("hour");
    return value.toI32();
  }

  set hour(value: i32) {
    this.set("hour", Value.fromI32(value));
  }

  get pairAddress(): Bytes {
    let value = this.get("pairAddress");
    return value.toBytes();
  }

  set pairAddress(value: Bytes) {
    this.set("pairAddress", Value.fromBytes(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (value === null) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(value as string));
    }
  }

  get baseToken(): string {
    let value = this.get("baseToken");
    return value.toString();
  }

  set baseToken(value: string) {
    this.set("baseToken", Value.fromString(value));
  }

  get quoteToken(): string {
    let value = this.get("quoteToken");
    return value.toString();
  }

  set quoteToken(value: string) {
    this.set("quoteToken", Value.fromString(value));
  }

  get baseTokenReserve(): BigDecimal {
    let value = this.get("baseTokenReserve");
    return value.toBigDecimal();
  }

  set baseTokenReserve(value: BigDecimal) {
    this.set("baseTokenReserve", Value.fromBigDecimal(value));
  }

  get quoteTokenReserve(): BigDecimal {
    let value = this.get("quoteTokenReserve");
    return value.toBigDecimal();
  }

  set quoteTokenReserve(value: BigDecimal) {
    this.set("quoteTokenReserve", Value.fromBigDecimal(value));
  }

  get baseLpTokenTotalSupply(): BigDecimal {
    let value = this.get("baseLpTokenTotalSupply");
    return value.toBigDecimal();
  }

  set baseLpTokenTotalSupply(value: BigDecimal) {
    this.set("baseLpTokenTotalSupply", Value.fromBigDecimal(value));
  }

  get quoteLpTokenTotalSupply(): BigDecimal {
    let value = this.get("quoteLpTokenTotalSupply");
    return value.toBigDecimal();
  }

  set quoteLpTokenTotalSupply(value: BigDecimal) {
    this.set("quoteLpTokenTotalSupply", Value.fromBigDecimal(value));
  }

  get untrackedBaseVolume(): BigDecimal {
    let value = this.get("untrackedBaseVolume");
    return value.toBigDecimal();
  }

  set untrackedBaseVolume(value: BigDecimal) {
    this.set("untrackedBaseVolume", Value.fromBigDecimal(value));
  }

  get untrackedQuoteVolume(): BigDecimal {
    let value = this.get("untrackedQuoteVolume");
    return value.toBigDecimal();
  }

  set untrackedQuoteVolume(value: BigDecimal) {
    this.set("untrackedQuoteVolume", Value.fromBigDecimal(value));
  }

  get volumeBase(): BigDecimal {
    let value = this.get("volumeBase");
    return value.toBigDecimal();
  }

  set volumeBase(value: BigDecimal) {
    this.set("volumeBase", Value.fromBigDecimal(value));
  }

  get volumeQuote(): BigDecimal {
    let value = this.get("volumeQuote");
    return value.toBigDecimal();
  }

  set volumeQuote(value: BigDecimal) {
    this.set("volumeQuote", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get txns(): BigInt {
    let value = this.get("txns");
    return value.toBigInt();
  }

  set txns(value: BigInt) {
    this.set("txns", Value.fromBigInt(value));
  }

  get traders(): BigInt {
    let value = this.get("traders");
    return value.toBigInt();
  }

  set traders(value: BigInt) {
    this.set("traders", Value.fromBigInt(value));
  }

  get feeBase(): BigDecimal {
    let value = this.get("feeBase");
    return value.toBigDecimal();
  }

  set feeBase(value: BigDecimal) {
    this.set("feeBase", Value.fromBigDecimal(value));
  }

  get feeQuote(): BigDecimal {
    let value = this.get("feeQuote");
    return value.toBigDecimal();
  }

  set feeQuote(value: BigDecimal) {
    this.set("feeQuote", Value.fromBigDecimal(value));
  }

  get lpFeeRate(): BigDecimal {
    let value = this.get("lpFeeRate");
    return value.toBigDecimal();
  }

  set lpFeeRate(value: BigDecimal) {
    this.set("lpFeeRate", Value.fromBigDecimal(value));
  }
}

export class TokenDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenDayData", id.toString(), this);
  }

  static load(id: string): TokenDayData | null {
    return store.get("TokenDayData", id) as TokenDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get untrackedVolume(): BigDecimal {
    let value = this.get("untrackedVolume");
    return value.toBigDecimal();
  }

  set untrackedVolume(value: BigDecimal) {
    this.set("untrackedVolume", Value.fromBigDecimal(value));
  }

  get volume(): BigDecimal {
    let value = this.get("volume");
    return value.toBigDecimal();
  }

  set volume(value: BigDecimal) {
    this.set("volume", Value.fromBigDecimal(value));
  }

  get volumeBridge(): BigDecimal {
    let value = this.get("volumeBridge");
    return value.toBigDecimal();
  }

  set volumeBridge(value: BigDecimal) {
    this.set("volumeBridge", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get txns(): BigInt {
    let value = this.get("txns");
    return value.toBigInt();
  }

  set txns(value: BigInt) {
    this.set("txns", Value.fromBigInt(value));
  }

  get traders(): BigInt {
    let value = this.get("traders");
    return value.toBigInt();
  }

  set traders(value: BigInt) {
    this.set("traders", Value.fromBigInt(value));
  }

  get totalLiquidityToken(): BigDecimal {
    let value = this.get("totalLiquidityToken");
    return value.toBigDecimal();
  }

  set totalLiquidityToken(value: BigDecimal) {
    this.set("totalLiquidityToken", Value.fromBigDecimal(value));
  }

  get fee(): BigDecimal {
    let value = this.get("fee");
    return value.toBigDecimal();
  }

  set fee(value: BigDecimal) {
    this.set("fee", Value.fromBigDecimal(value));
  }
}

export class CrowdPooling extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CrowdPooling entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CrowdPooling entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CrowdPooling", id.toString(), this);
  }

  static load(id: string): CrowdPooling | null {
    return store.get("CrowdPooling", id) as CrowdPooling | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get serialNumber(): BigInt {
    let value = this.get("serialNumber");
    return value.toBigInt();
  }

  set serialNumber(value: BigInt) {
    this.set("serialNumber", Value.fromBigInt(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get createTime(): BigInt {
    let value = this.get("createTime");
    return value.toBigInt();
  }

  set createTime(value: BigInt) {
    this.set("createTime", Value.fromBigInt(value));
  }

  get baseToken(): string {
    let value = this.get("baseToken");
    return value.toString();
  }

  set baseToken(value: string) {
    this.set("baseToken", Value.fromString(value));
  }

  get quoteToken(): string {
    let value = this.get("quoteToken");
    return value.toString();
  }

  set quoteToken(value: string) {
    this.set("quoteToken", Value.fromString(value));
  }

  get bidStartTime(): BigInt {
    let value = this.get("bidStartTime");
    return value.toBigInt();
  }

  set bidStartTime(value: BigInt) {
    this.set("bidStartTime", Value.fromBigInt(value));
  }

  get bidEndTime(): BigInt {
    let value = this.get("bidEndTime");
    return value.toBigInt();
  }

  set bidEndTime(value: BigInt) {
    this.set("bidEndTime", Value.fromBigInt(value));
  }

  get calmEndTime(): BigInt {
    let value = this.get("calmEndTime");
    return value.toBigInt();
  }

  set calmEndTime(value: BigInt) {
    this.set("calmEndTime", Value.fromBigInt(value));
  }

  get freezeDuration(): BigInt {
    let value = this.get("freezeDuration");
    return value.toBigInt();
  }

  set freezeDuration(value: BigInt) {
    this.set("freezeDuration", Value.fromBigInt(value));
  }

  get vestingDuration(): BigInt {
    let value = this.get("vestingDuration");
    return value.toBigInt();
  }

  set vestingDuration(value: BigInt) {
    this.set("vestingDuration", Value.fromBigInt(value));
  }

  get i(): BigInt {
    let value = this.get("i");
    return value.toBigInt();
  }

  set i(value: BigInt) {
    this.set("i", Value.fromBigInt(value));
  }

  get k(): BigInt {
    let value = this.get("k");
    return value.toBigInt();
  }

  set k(value: BigInt) {
    this.set("k", Value.fromBigInt(value));
  }

  get mtFeeRateModel(): Bytes {
    let value = this.get("mtFeeRateModel");
    return value.toBytes();
  }

  set mtFeeRateModel(value: Bytes) {
    this.set("mtFeeRateModel", Value.fromBytes(value));
  }

  get totalShares(): BigDecimal {
    let value = this.get("totalShares");
    return value.toBigDecimal();
  }

  set totalShares(value: BigDecimal) {
    this.set("totalShares", Value.fromBigDecimal(value));
  }

  get totalBase(): BigDecimal {
    let value = this.get("totalBase");
    return value.toBigDecimal();
  }

  set totalBase(value: BigDecimal) {
    this.set("totalBase", Value.fromBigDecimal(value));
  }

  get settled(): boolean {
    let value = this.get("settled");
    return value.toBoolean();
  }

  set settled(value: boolean) {
    this.set("settled", Value.fromBoolean(value));
  }

  get dvm(): string | null {
    let value = this.get("dvm");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dvm(value: string | null) {
    if (value === null) {
      this.unset("dvm");
    } else {
      this.set("dvm", Value.fromString(value as string));
    }
  }

  get liquidator(): Bytes {
    let value = this.get("liquidator");
    return value.toBytes();
  }

  set liquidator(value: Bytes) {
    this.set("liquidator", Value.fromBytes(value));
  }

  get poolQuote(): BigDecimal {
    let value = this.get("poolQuote");
    return value.toBigDecimal();
  }

  set poolQuote(value: BigDecimal) {
    this.set("poolQuote", Value.fromBigDecimal(value));
  }

  get poolQuoteCap(): BigDecimal {
    let value = this.get("poolQuoteCap");
    return value.toBigDecimal();
  }

  set poolQuoteCap(value: BigDecimal) {
    this.set("poolQuoteCap", Value.fromBigDecimal(value));
  }

  get investorsCount(): BigInt {
    let value = this.get("investorsCount");
    return value.toBigInt();
  }

  set investorsCount(value: BigInt) {
    this.set("investorsCount", Value.fromBigInt(value));
  }
}

export class BidPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BidPosition entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BidPosition entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BidPosition", id.toString(), this);
  }

  static load(id: string): BidPosition | null {
    return store.get("BidPosition", id) as BidPosition | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get cp(): string {
    let value = this.get("cp");
    return value.toString();
  }

  set cp(value: string) {
    this.set("cp", Value.fromString(value));
  }

  get shares(): BigDecimal {
    let value = this.get("shares");
    return value.toBigDecimal();
  }

  set shares(value: BigDecimal) {
    this.set("shares", Value.fromBigDecimal(value));
  }

  get investedQuote(): BigDecimal {
    let value = this.get("investedQuote");
    return value.toBigDecimal();
  }

  set investedQuote(value: BigDecimal) {
    this.set("investedQuote", Value.fromBigDecimal(value));
  }

  get lastTxTime(): BigInt {
    let value = this.get("lastTxTime");
    return value.toBigInt();
  }

  set lastTxTime(value: BigInt) {
    this.set("lastTxTime", Value.fromBigInt(value));
  }

  get claimed(): boolean {
    let value = this.get("claimed");
    return value.toBoolean();
  }

  set claimed(value: boolean) {
    this.set("claimed", Value.fromBoolean(value));
  }
}

export class BidHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BidHistory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BidHistory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BidHistory", id.toString(), this);
  }

  static load(id: string): BidHistory | null {
    return store.get("BidHistory", id) as BidHistory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get cp(): string {
    let value = this.get("cp");
    return value.toString();
  }

  set cp(value: string) {
    this.set("cp", Value.fromString(value));
  }

  get action(): string {
    let value = this.get("action");
    return value.toString();
  }

  set action(value: string) {
    this.set("action", Value.fromString(value));
  }

  get hash(): string {
    let value = this.get("hash");
    return value.toString();
  }

  set hash(value: string) {
    this.set("hash", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get quote(): BigDecimal {
    let value = this.get("quote");
    return value.toBigDecimal();
  }

  set quote(value: BigDecimal) {
    this.set("quote", Value.fromBigDecimal(value));
  }

  get share(): BigDecimal {
    let value = this.get("share");
    return value.toBigDecimal();
  }

  set share(value: BigDecimal) {
    this.set("share", Value.fromBigDecimal(value));
  }

  get fee(): BigDecimal {
    let value = this.get("fee");
    return value.toBigDecimal();
  }

  set fee(value: BigDecimal) {
    this.set("fee", Value.fromBigDecimal(value));
  }
}

export class CrowdPoolingDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CrowdPoolingDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CrowdPoolingDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CrowdPoolingDayData", id.toString(), this);
  }

  static load(id: string): CrowdPoolingDayData | null {
    return store.get("CrowdPoolingDayData", id) as CrowdPoolingDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get crowdPooling(): string {
    let value = this.get("crowdPooling");
    return value.toString();
  }

  set crowdPooling(value: string) {
    this.set("crowdPooling", Value.fromString(value));
  }

  get investedQuote(): BigDecimal {
    let value = this.get("investedQuote");
    return value.toBigDecimal();
  }

  set investedQuote(value: BigDecimal) {
    this.set("investedQuote", Value.fromBigDecimal(value));
  }

  get canceledQuote(): BigDecimal {
    let value = this.get("canceledQuote");
    return value.toBigDecimal();
  }

  set canceledQuote(value: BigDecimal) {
    this.set("canceledQuote", Value.fromBigDecimal(value));
  }

  get investCount(): BigInt {
    let value = this.get("investCount");
    return value.toBigInt();
  }

  set investCount(value: BigInt) {
    this.set("investCount", Value.fromBigInt(value));
  }

  get newcome(): BigInt {
    let value = this.get("newcome");
    return value.toBigInt();
  }

  set newcome(value: BigInt) {
    this.set("newcome", Value.fromBigInt(value));
  }

  get poolQuote(): BigDecimal {
    let value = this.get("poolQuote");
    return value.toBigDecimal();
  }

  set poolQuote(value: BigDecimal) {
    this.set("poolQuote", Value.fromBigDecimal(value));
  }

  get investors(): BigInt {
    let value = this.get("investors");
    return value.toBigInt();
  }

  set investors(value: BigInt) {
    this.set("investors", Value.fromBigInt(value));
  }
}

export class CrowdPoolingHourData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CrowdPoolingHourData entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CrowdPoolingHourData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CrowdPoolingHourData", id.toString(), this);
  }

  static load(id: string): CrowdPoolingHourData | null {
    return store.get("CrowdPoolingHourData", id) as CrowdPoolingHourData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hour(): i32 {
    let value = this.get("hour");
    return value.toI32();
  }

  set hour(value: i32) {
    this.set("hour", Value.fromI32(value));
  }

  get crowdPooling(): string {
    let value = this.get("crowdPooling");
    return value.toString();
  }

  set crowdPooling(value: string) {
    this.set("crowdPooling", Value.fromString(value));
  }

  get investedQuote(): BigDecimal {
    let value = this.get("investedQuote");
    return value.toBigDecimal();
  }

  set investedQuote(value: BigDecimal) {
    this.set("investedQuote", Value.fromBigDecimal(value));
  }

  get canceledQuote(): BigDecimal {
    let value = this.get("canceledQuote");
    return value.toBigDecimal();
  }

  set canceledQuote(value: BigDecimal) {
    this.set("canceledQuote", Value.fromBigDecimal(value));
  }

  get investCount(): BigInt {
    let value = this.get("investCount");
    return value.toBigInt();
  }

  set investCount(value: BigInt) {
    this.set("investCount", Value.fromBigInt(value));
  }

  get newcome(): BigInt {
    let value = this.get("newcome");
    return value.toBigInt();
  }

  set newcome(value: BigInt) {
    this.set("newcome", Value.fromBigInt(value));
  }

  get poolQuote(): BigDecimal {
    let value = this.get("poolQuote");
    return value.toBigDecimal();
  }

  set poolQuote(value: BigDecimal) {
    this.set("poolQuote", Value.fromBigDecimal(value));
  }

  get investors(): BigInt {
    let value = this.get("investors");
    return value.toBigInt();
  }

  set investors(value: BigInt) {
    this.set("investors", Value.fromBigInt(value));
  }
}

export class TradingIncentive extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TradingIncentive entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TradingIncentive entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TradingIncentive", id.toString(), this);
  }

  static load(id: string): TradingIncentive | null {
    return store.get("TradingIncentive", id) as TradingIncentive | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalAmount(): BigDecimal {
    let value = this.get("totalAmount");
    return value.toBigDecimal();
  }

  set totalAmount(value: BigDecimal) {
    this.set("totalAmount", Value.fromBigDecimal(value));
  }

  get totalUser(): BigInt {
    let value = this.get("totalUser");
    return value.toBigInt();
  }

  set totalUser(value: BigInt) {
    this.set("totalUser", Value.fromBigInt(value));
  }
}

export class IncentiveRewardHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save IncentiveRewardHistory entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save IncentiveRewardHistory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("IncentiveRewardHistory", id.toString(), this);
  }

  static load(id: string): IncentiveRewardHistory | null {
    return store.get(
      "IncentiveRewardHistory",
      id
    ) as IncentiveRewardHistory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get times(): BigInt {
    let value = this.get("times");
    return value.toBigInt();
  }

  set times(value: BigInt) {
    this.set("times", Value.fromBigInt(value));
  }

  get totalAmount(): BigDecimal {
    let value = this.get("totalAmount");
    return value.toBigDecimal();
  }

  set totalAmount(value: BigDecimal) {
    this.set("totalAmount", Value.fromBigDecimal(value));
  }

  get totalUser(): BigInt {
    let value = this.get("totalUser");
    return value.toBigInt();
  }

  set totalUser(value: BigInt) {
    this.set("totalUser", Value.fromBigInt(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Pool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pool", id.toString(), this);
  }

  static load(id: string): Pool | null {
    return store.get("Pool", id) as Pool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lpToken(): string {
    let value = this.get("lpToken");
    return value.toString();
  }

  set lpToken(value: string) {
    this.set("lpToken", Value.fromString(value));
  }

  get staked(): BigDecimal {
    let value = this.get("staked");
    return value.toBigDecimal();
  }

  set staked(value: BigDecimal) {
    this.set("staked", Value.fromBigDecimal(value));
  }
}

export class MiningPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MiningPool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MiningPool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MiningPool", id.toString(), this);
  }

  static load(id: string): MiningPool | null {
    return store.get("MiningPool", id) as MiningPool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lpToken(): string {
    let value = this.get("lpToken");
    return value.toString();
  }

  set lpToken(value: string) {
    this.set("lpToken", Value.fromString(value));
  }
}
