// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Bid extends ethereum.Event {
  get params(): Bid__Params {
    return new Bid__Params(this);
  }
}

export class Bid__Params {
  _event: Bid;

  constructor(event: Bid) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Cancel extends ethereum.Event {
  get params(): Cancel__Params {
    return new Cancel__Params(this);
  }
}

export class Cancel__Params {
  _event: Cancel;

  constructor(event: Cancel) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Claim extends ethereum.Event {
  get params(): Claim__Params {
    return new Claim__Params(this);
  }
}

export class Claim__Params {
  _event: Claim;

  constructor(event: Claim) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get baseAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get quoteAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ClaimLP extends ethereum.Event {
  get params(): ClaimLP__Params {
    return new ClaimLP__Params(this);
  }
}

export class ClaimLP__Params {
  _event: ClaimLP;

  constructor(event: ClaimLP) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferPrepared extends ethereum.Event {
  get params(): OwnershipTransferPrepared__Params {
    return new OwnershipTransferPrepared__Params(this);
  }
}

export class OwnershipTransferPrepared__Params {
  _event: OwnershipTransferPrepared;

  constructor(event: OwnershipTransferPrepared) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Settle extends ethereum.Event {
  get params(): Settle__Params {
    return new Settle__Params(this);
  }
}

export class Settle__Params {
  _event: Settle;

  constructor(event: Settle) {
    this._event = event;
  }
}

export class CP__getSettleResultResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class CP extends ethereum.SmartContract {
  static bind(address: Address): CP {
    return new CP("CP", address);
  }

  _AVG_SETTLED_PRICE_(): BigInt {
    let result = super.call(
      "_AVG_SETTLED_PRICE_",
      "_AVG_SETTLED_PRICE_():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__AVG_SETTLED_PRICE_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_AVG_SETTLED_PRICE_",
      "_AVG_SETTLED_PRICE_():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _BASE_TOKEN_(): Address {
    let result = super.call("_BASE_TOKEN_", "_BASE_TOKEN_():(address)", []);

    return result[0].toAddress();
  }

  try__BASE_TOKEN_(): ethereum.CallResult<Address> {
    let result = super.tryCall("_BASE_TOKEN_", "_BASE_TOKEN_():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _BIDDER_PERMISSION_(): Address {
    let result = super.call(
      "_BIDDER_PERMISSION_",
      "_BIDDER_PERMISSION_():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__BIDDER_PERMISSION_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_BIDDER_PERMISSION_",
      "_BIDDER_PERMISSION_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _CLAIMED_(param0: Address): boolean {
    let result = super.call("_CLAIMED_", "_CLAIMED_(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try__CLAIMED_(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("_CLAIMED_", "_CLAIMED_(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _CLIFF_RATE_(): BigInt {
    let result = super.call("_CLIFF_RATE_", "_CLIFF_RATE_():(uint256)", []);

    return result[0].toBigInt();
  }

  try__CLIFF_RATE_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_CLIFF_RATE_", "_CLIFF_RATE_():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _FREEZE_DURATION_(): BigInt {
    let result = super.call(
      "_FREEZE_DURATION_",
      "_FREEZE_DURATION_():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__FREEZE_DURATION_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_FREEZE_DURATION_",
      "_FREEZE_DURATION_():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _IS_OPEN_TWAP_(): boolean {
    let result = super.call("_IS_OPEN_TWAP_", "_IS_OPEN_TWAP_():(bool)", []);

    return result[0].toBoolean();
  }

  try__IS_OPEN_TWAP_(): ethereum.CallResult<boolean> {
    let result = super.tryCall("_IS_OPEN_TWAP_", "_IS_OPEN_TWAP_():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _I_(): BigInt {
    let result = super.call("_I_", "_I_():(uint256)", []);

    return result[0].toBigInt();
  }

  try__I_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_I_", "_I_():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _K_(): BigInt {
    let result = super.call("_K_", "_K_():(uint256)", []);

    return result[0].toBigInt();
  }

  try__K_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_K_", "_K_():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _MAINTAINER_(): Address {
    let result = super.call("_MAINTAINER_", "_MAINTAINER_():(address)", []);

    return result[0].toAddress();
  }

  try__MAINTAINER_(): ethereum.CallResult<Address> {
    let result = super.tryCall("_MAINTAINER_", "_MAINTAINER_():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _MT_FEE_RATE_MODEL_(): Address {
    let result = super.call(
      "_MT_FEE_RATE_MODEL_",
      "_MT_FEE_RATE_MODEL_():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__MT_FEE_RATE_MODEL_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_MT_FEE_RATE_MODEL_",
      "_MT_FEE_RATE_MODEL_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _NEW_OWNER_(): Address {
    let result = super.call("_NEW_OWNER_", "_NEW_OWNER_():(address)", []);

    return result[0].toAddress();
  }

  try__NEW_OWNER_(): ethereum.CallResult<Address> {
    let result = super.tryCall("_NEW_OWNER_", "_NEW_OWNER_():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _OWNER_(): Address {
    let result = super.call("_OWNER_", "_OWNER_():(address)", []);

    return result[0].toAddress();
  }

  try__OWNER_(): ethereum.CallResult<Address> {
    let result = super.tryCall("_OWNER_", "_OWNER_():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _PHASE_BID_ENDTIME_(): BigInt {
    let result = super.call(
      "_PHASE_BID_ENDTIME_",
      "_PHASE_BID_ENDTIME_():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__PHASE_BID_ENDTIME_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_PHASE_BID_ENDTIME_",
      "_PHASE_BID_ENDTIME_():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _PHASE_BID_STARTTIME_(): BigInt {
    let result = super.call(
      "_PHASE_BID_STARTTIME_",
      "_PHASE_BID_STARTTIME_():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__PHASE_BID_STARTTIME_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_PHASE_BID_STARTTIME_",
      "_PHASE_BID_STARTTIME_():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _PHASE_CALM_ENDTIME_(): BigInt {
    let result = super.call(
      "_PHASE_CALM_ENDTIME_",
      "_PHASE_CALM_ENDTIME_():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__PHASE_CALM_ENDTIME_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_PHASE_CALM_ENDTIME_",
      "_PHASE_CALM_ENDTIME_():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _POOL_(): Address {
    let result = super.call("_POOL_", "_POOL_():(address)", []);

    return result[0].toAddress();
  }

  try__POOL_(): ethereum.CallResult<Address> {
    let result = super.tryCall("_POOL_", "_POOL_():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _POOL_FACTORY_(): Address {
    let result = super.call("_POOL_FACTORY_", "_POOL_FACTORY_():(address)", []);

    return result[0].toAddress();
  }

  try__POOL_FACTORY_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_POOL_FACTORY_",
      "_POOL_FACTORY_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _POOL_QUOTE_CAP_(): BigInt {
    let result = super.call(
      "_POOL_QUOTE_CAP_",
      "_POOL_QUOTE_CAP_():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__POOL_QUOTE_CAP_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_POOL_QUOTE_CAP_",
      "_POOL_QUOTE_CAP_():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _QUOTE_RESERVE_(): BigInt {
    let result = super.call(
      "_QUOTE_RESERVE_",
      "_QUOTE_RESERVE_():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__QUOTE_RESERVE_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_QUOTE_RESERVE_",
      "_QUOTE_RESERVE_():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _QUOTE_TOKEN_(): Address {
    let result = super.call("_QUOTE_TOKEN_", "_QUOTE_TOKEN_():(address)", []);

    return result[0].toAddress();
  }

  try__QUOTE_TOKEN_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_QUOTE_TOKEN_",
      "_QUOTE_TOKEN_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _SETTLED_(): boolean {
    let result = super.call("_SETTLED_", "_SETTLED_():(bool)", []);

    return result[0].toBoolean();
  }

  try__SETTLED_(): ethereum.CallResult<boolean> {
    let result = super.tryCall("_SETTLED_", "_SETTLED_():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _SETTLED_TIME_(): BigInt {
    let result = super.call("_SETTLED_TIME_", "_SETTLED_TIME_():(uint256)", []);

    return result[0].toBigInt();
  }

  try__SETTLED_TIME_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_SETTLED_TIME_",
      "_SETTLED_TIME_():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _TOTAL_BASE_(): BigInt {
    let result = super.call("_TOTAL_BASE_", "_TOTAL_BASE_():(uint256)", []);

    return result[0].toBigInt();
  }

  try__TOTAL_BASE_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_TOTAL_BASE_", "_TOTAL_BASE_():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _TOTAL_LP_AMOUNT_(): BigInt {
    let result = super.call(
      "_TOTAL_LP_AMOUNT_",
      "_TOTAL_LP_AMOUNT_():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__TOTAL_LP_AMOUNT_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_TOTAL_LP_AMOUNT_",
      "_TOTAL_LP_AMOUNT_():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _TOTAL_SHARES_(): BigInt {
    let result = super.call("_TOTAL_SHARES_", "_TOTAL_SHARES_():(uint256)", []);

    return result[0].toBigInt();
  }

  try__TOTAL_SHARES_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_TOTAL_SHARES_",
      "_TOTAL_SHARES_():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _UNUSED_BASE_(): BigInt {
    let result = super.call("_UNUSED_BASE_", "_UNUSED_BASE_():(uint256)", []);

    return result[0].toBigInt();
  }

  try__UNUSED_BASE_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_UNUSED_BASE_",
      "_UNUSED_BASE_():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _UNUSED_QUOTE_(): BigInt {
    let result = super.call("_UNUSED_QUOTE_", "_UNUSED_QUOTE_():(uint256)", []);

    return result[0].toBigInt();
  }

  try__UNUSED_QUOTE_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_UNUSED_QUOTE_",
      "_UNUSED_QUOTE_():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _VESTING_DURATION_(): BigInt {
    let result = super.call(
      "_VESTING_DURATION_",
      "_VESTING_DURATION_():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__VESTING_DURATION_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_VESTING_DURATION_",
      "_VESTING_DURATION_():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClaimableLPToken(): BigInt {
    let result = super.call(
      "getClaimableLPToken",
      "getClaimableLPToken():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getClaimableLPToken(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getClaimableLPToken",
      "getClaimableLPToken():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getExpectedAvgPrice(): BigInt {
    let result = super.call(
      "getExpectedAvgPrice",
      "getExpectedAvgPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getExpectedAvgPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getExpectedAvgPrice",
      "getExpectedAvgPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRemainingLPRatio(timestamp: BigInt): BigInt {
    let result = super.call(
      "getRemainingLPRatio",
      "getRemainingLPRatio(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );

    return result[0].toBigInt();
  }

  try_getRemainingLPRatio(timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRemainingLPRatio",
      "getRemainingLPRatio(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSettleResult(): CP__getSettleResultResult {
    let result = super.call(
      "getSettleResult",
      "getSettleResult():(uint256,uint256,uint256,uint256,uint256)",
      []
    );

    return new CP__getSettleResultResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getSettleResult(): ethereum.CallResult<CP__getSettleResultResult> {
    let result = super.tryCall(
      "getSettleResult",
      "getSettleResult():(uint256,uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CP__getSettleResultResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getShares(user: Address): BigInt {
    let result = super.call("getShares", "getShares(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_getShares(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getShares", "getShares(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class BidCall extends ethereum.Call {
  get inputs(): BidCall__Inputs {
    return new BidCall__Inputs(this);
  }

  get outputs(): BidCall__Outputs {
    return new BidCall__Outputs(this);
  }
}

export class BidCall__Inputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BidCall__Outputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }
}

export class BidderClaimCall extends ethereum.Call {
  get inputs(): BidderClaimCall__Inputs {
    return new BidderClaimCall__Inputs(this);
  }

  get outputs(): BidderClaimCall__Outputs {
    return new BidderClaimCall__Outputs(this);
  }
}

export class BidderClaimCall__Inputs {
  _call: BidderClaimCall;

  constructor(call: BidderClaimCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class BidderClaimCall__Outputs {
  _call: BidderClaimCall;

  constructor(call: BidderClaimCall) {
    this._call = call;
  }
}

export class CancelCall extends ethereum.Call {
  get inputs(): CancelCall__Inputs {
    return new CancelCall__Inputs(this);
  }

  get outputs(): CancelCall__Outputs {
    return new CancelCall__Outputs(this);
  }
}

export class CancelCall__Inputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class CancelCall__Outputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }
}

export class ClaimLPTokenCall extends ethereum.Call {
  get inputs(): ClaimLPTokenCall__Inputs {
    return new ClaimLPTokenCall__Inputs(this);
  }

  get outputs(): ClaimLPTokenCall__Outputs {
    return new ClaimLPTokenCall__Outputs(this);
  }
}

export class ClaimLPTokenCall__Inputs {
  _call: ClaimLPTokenCall;

  constructor(call: ClaimLPTokenCall) {
    this._call = call;
  }
}

export class ClaimLPTokenCall__Outputs {
  _call: ClaimLPTokenCall;

  constructor(call: ClaimLPTokenCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall extends ethereum.Call {
  get inputs(): ClaimOwnershipCall__Inputs {
    return new ClaimOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimOwnershipCall__Outputs {
    return new ClaimOwnershipCall__Outputs(this);
  }
}

export class ClaimOwnershipCall__Inputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall__Outputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class EmergencySettleCall extends ethereum.Call {
  get inputs(): EmergencySettleCall__Inputs {
    return new EmergencySettleCall__Inputs(this);
  }

  get outputs(): EmergencySettleCall__Outputs {
    return new EmergencySettleCall__Outputs(this);
  }
}

export class EmergencySettleCall__Inputs {
  _call: EmergencySettleCall;

  constructor(call: EmergencySettleCall) {
    this._call = call;
  }
}

export class EmergencySettleCall__Outputs {
  _call: EmergencySettleCall;

  constructor(call: EmergencySettleCall) {
    this._call = call;
  }
}

export class InitOwnerCall extends ethereum.Call {
  get inputs(): InitOwnerCall__Inputs {
    return new InitOwnerCall__Inputs(this);
  }

  get outputs(): InitOwnerCall__Outputs {
    return new InitOwnerCall__Outputs(this);
  }
}

export class InitOwnerCall__Inputs {
  _call: InitOwnerCall;

  constructor(call: InitOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitOwnerCall__Outputs {
  _call: InitOwnerCall;

  constructor(call: InitOwnerCall) {
    this._call = call;
  }
}

export class SettleCall extends ethereum.Call {
  get inputs(): SettleCall__Inputs {
    return new SettleCall__Inputs(this);
  }

  get outputs(): SettleCall__Outputs {
    return new SettleCall__Outputs(this);
  }
}

export class SettleCall__Inputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }
}

export class SettleCall__Outputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get addressList(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get timeLine(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get valueList(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get isOpenTWAP(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}
