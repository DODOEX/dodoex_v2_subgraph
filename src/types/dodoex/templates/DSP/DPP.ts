// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DODOFlashLoan extends ethereum.Event {
  get params(): DODOFlashLoan__Params {
    return new DODOFlashLoan__Params(this);
  }
}

export class DODOFlashLoan__Params {
  _event: DODOFlashLoan;

  constructor(event: DODOFlashLoan) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get assetTo(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get baseAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get quoteAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class DODOSwap extends ethereum.Event {
  get params(): DODOSwap__Params {
    return new DODOSwap__Params(this);
  }
}

export class DODOSwap__Params {
  _event: DODOSwap;

  constructor(event: DODOSwap) {
    this._event = event;
  }

  get fromToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get toToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fromAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get toAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get trader(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class LpFeeRateChange extends ethereum.Event {
  get params(): LpFeeRateChange__Params {
    return new LpFeeRateChange__Params(this);
  }
}

export class LpFeeRateChange__Params {
  _event: LpFeeRateChange;

  constructor(event: LpFeeRateChange) {
    this._event = event;
  }

  get newLpFeeRate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferPrepared extends ethereum.Event {
  get params(): OwnershipTransferPrepared__Params {
    return new OwnershipTransferPrepared__Params(this);
  }
}

export class OwnershipTransferPrepared__Params {
  _event: OwnershipTransferPrepared;

  constructor(event: OwnershipTransferPrepared) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RChange extends ethereum.Event {
  get params(): RChange__Params {
    return new RChange__Params(this);
  }
}

export class RChange__Params {
  _event: RChange;

  constructor(event: RChange) {
    this._event = event;
  }

  get newRState(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class DPP__getPMMStateResultStateStruct extends ethereum.Tuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get K(): BigInt {
    return this[1].toBigInt();
  }

  get B(): BigInt {
    return this[2].toBigInt();
  }

  get Q(): BigInt {
    return this[3].toBigInt();
  }

  get B0(): BigInt {
    return this[4].toBigInt();
  }

  get Q0(): BigInt {
    return this[5].toBigInt();
  }

  get R(): i32 {
    return this[6].toI32();
  }
}

export class DPP__getPMMStateForCallResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class DPP__getUserFeeRateResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DPP__getVaultReserveResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DPP__querySellBaseResult {
  value0: BigInt;
  value1: BigInt;
  value2: i32;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: i32, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class DPP__querySellQuoteResult {
  value0: BigInt;
  value1: BigInt;
  value2: i32;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: i32, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class DPP extends ethereum.SmartContract {
  static bind(address: Address): DPP {
    return new DPP("DPP", address);
  }

  _BASE_PRICE_CUMULATIVE_LAST_(): BigInt {
    let result = super.call(
      "_BASE_PRICE_CUMULATIVE_LAST_",
      "_BASE_PRICE_CUMULATIVE_LAST_():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__BASE_PRICE_CUMULATIVE_LAST_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_BASE_PRICE_CUMULATIVE_LAST_",
      "_BASE_PRICE_CUMULATIVE_LAST_():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _BASE_RESERVE_(): BigInt {
    let result = super.call("_BASE_RESERVE_", "_BASE_RESERVE_():(uint112)", []);

    return result[0].toBigInt();
  }

  try__BASE_RESERVE_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_BASE_RESERVE_",
      "_BASE_RESERVE_():(uint112)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _BASE_TARGET_(): BigInt {
    let result = super.call("_BASE_TARGET_", "_BASE_TARGET_():(uint112)", []);

    return result[0].toBigInt();
  }

  try__BASE_TARGET_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_BASE_TARGET_",
      "_BASE_TARGET_():(uint112)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _BASE_TOKEN_(): Address {
    let result = super.call("_BASE_TOKEN_", "_BASE_TOKEN_():(address)", []);

    return result[0].toAddress();
  }

  try__BASE_TOKEN_(): ethereum.CallResult<Address> {
    let result = super.tryCall("_BASE_TOKEN_", "_BASE_TOKEN_():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _BLOCK_TIMESTAMP_LAST_(): BigInt {
    let result = super.call(
      "_BLOCK_TIMESTAMP_LAST_",
      "_BLOCK_TIMESTAMP_LAST_():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try__BLOCK_TIMESTAMP_LAST_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_BLOCK_TIMESTAMP_LAST_",
      "_BLOCK_TIMESTAMP_LAST_():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _IS_OPEN_TWAP_(): boolean {
    let result = super.call("_IS_OPEN_TWAP_", "_IS_OPEN_TWAP_():(bool)", []);

    return result[0].toBoolean();
  }

  try__IS_OPEN_TWAP_(): ethereum.CallResult<boolean> {
    let result = super.tryCall("_IS_OPEN_TWAP_", "_IS_OPEN_TWAP_():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _I_(): BigInt {
    let result = super.call("_I_", "_I_():(uint128)", []);

    return result[0].toBigInt();
  }

  try__I_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_I_", "_I_():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _K_(): BigInt {
    let result = super.call("_K_", "_K_():(uint64)", []);

    return result[0].toBigInt();
  }

  try__K_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_K_", "_K_():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _LP_FEE_RATE_(): BigInt {
    let result = super.call("_LP_FEE_RATE_", "_LP_FEE_RATE_():(uint64)", []);

    return result[0].toBigInt();
  }

  try__LP_FEE_RATE_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_LP_FEE_RATE_", "_LP_FEE_RATE_():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _MAINTAINER_(): Address {
    let result = super.call("_MAINTAINER_", "_MAINTAINER_():(address)", []);

    return result[0].toAddress();
  }

  try__MAINTAINER_(): ethereum.CallResult<Address> {
    let result = super.tryCall("_MAINTAINER_", "_MAINTAINER_():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _MT_FEE_RATE_MODEL_(): Address {
    let result = super.call(
      "_MT_FEE_RATE_MODEL_",
      "_MT_FEE_RATE_MODEL_():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__MT_FEE_RATE_MODEL_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_MT_FEE_RATE_MODEL_",
      "_MT_FEE_RATE_MODEL_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _NEW_OWNER_(): Address {
    let result = super.call("_NEW_OWNER_", "_NEW_OWNER_():(address)", []);

    return result[0].toAddress();
  }

  try__NEW_OWNER_(): ethereum.CallResult<Address> {
    let result = super.tryCall("_NEW_OWNER_", "_NEW_OWNER_():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _OWNER_(): Address {
    let result = super.call("_OWNER_", "_OWNER_():(address)", []);

    return result[0].toAddress();
  }

  try__OWNER_(): ethereum.CallResult<Address> {
    let result = super.tryCall("_OWNER_", "_OWNER_():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _QUOTE_RESERVE_(): BigInt {
    let result = super.call(
      "_QUOTE_RESERVE_",
      "_QUOTE_RESERVE_():(uint112)",
      []
    );

    return result[0].toBigInt();
  }

  try__QUOTE_RESERVE_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_QUOTE_RESERVE_",
      "_QUOTE_RESERVE_():(uint112)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _QUOTE_TARGET_(): BigInt {
    let result = super.call("_QUOTE_TARGET_", "_QUOTE_TARGET_():(uint112)", []);

    return result[0].toBigInt();
  }

  try__QUOTE_TARGET_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_QUOTE_TARGET_",
      "_QUOTE_TARGET_():(uint112)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _QUOTE_TOKEN_(): Address {
    let result = super.call("_QUOTE_TOKEN_", "_QUOTE_TOKEN_():(address)", []);

    return result[0].toAddress();
  }

  try__QUOTE_TOKEN_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_QUOTE_TOKEN_",
      "_QUOTE_TOKEN_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _RState_(): BigInt {
    let result = super.call("_RState_", "_RState_():(uint32)", []);

    return result[0].toBigInt();
  }

  try__RState_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_RState_", "_RState_():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBaseInput(): BigInt {
    let result = super.call("getBaseInput", "getBaseInput():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getBaseInput(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getBaseInput", "getBaseInput():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMidPrice(): BigInt {
    let result = super.call("getMidPrice", "getMidPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getMidPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getMidPrice", "getMidPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPMMState(): DPP__getPMMStateResultStateStruct {
    let result = super.call(
      "getPMMState",
      "getPMMState():((uint256,uint256,uint256,uint256,uint256,uint256,uint8))",
      []
    );

    return changetype<DPP__getPMMStateResultStateStruct>(result[0].toTuple());
  }

  try_getPMMState(): ethereum.CallResult<DPP__getPMMStateResultStateStruct> {
    let result = super.tryCall(
      "getPMMState",
      "getPMMState():((uint256,uint256,uint256,uint256,uint256,uint256,uint8))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<DPP__getPMMStateResultStateStruct>(value[0].toTuple())
    );
  }

  getPMMStateForCall(): DPP__getPMMStateForCallResult {
    let result = super.call(
      "getPMMStateForCall",
      "getPMMStateForCall():(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      []
    );

    return new DPP__getPMMStateForCallResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_getPMMStateForCall(): ethereum.CallResult<DPP__getPMMStateForCallResult> {
    let result = super.tryCall(
      "getPMMStateForCall",
      "getPMMStateForCall():(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DPP__getPMMStateForCallResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  getQuoteInput(): BigInt {
    let result = super.call("getQuoteInput", "getQuoteInput():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getQuoteInput(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getQuoteInput",
      "getQuoteInput():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserFeeRate(user: Address): DPP__getUserFeeRateResult {
    let result = super.call(
      "getUserFeeRate",
      "getUserFeeRate(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return new DPP__getUserFeeRateResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getUserFeeRate(
    user: Address
  ): ethereum.CallResult<DPP__getUserFeeRateResult> {
    let result = super.tryCall(
      "getUserFeeRate",
      "getUserFeeRate(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DPP__getUserFeeRateResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  getVaultReserve(): DPP__getVaultReserveResult {
    let result = super.call(
      "getVaultReserve",
      "getVaultReserve():(uint256,uint256)",
      []
    );

    return new DPP__getVaultReserveResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getVaultReserve(): ethereum.CallResult<DPP__getVaultReserveResult> {
    let result = super.tryCall(
      "getVaultReserve",
      "getVaultReserve():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DPP__getVaultReserveResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  querySellBase(
    trader: Address,
    payBaseAmount: BigInt
  ): DPP__querySellBaseResult {
    let result = super.call(
      "querySellBase",
      "querySellBase(address,uint256):(uint256,uint256,uint8,uint256)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromUnsignedBigInt(payBaseAmount)
      ]
    );

    return new DPP__querySellBaseResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toBigInt()
    );
  }

  try_querySellBase(
    trader: Address,
    payBaseAmount: BigInt
  ): ethereum.CallResult<DPP__querySellBaseResult> {
    let result = super.tryCall(
      "querySellBase",
      "querySellBase(address,uint256):(uint256,uint256,uint8,uint256)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromUnsignedBigInt(payBaseAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DPP__querySellBaseResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toBigInt()
      )
    );
  }

  querySellQuote(
    trader: Address,
    payQuoteAmount: BigInt
  ): DPP__querySellQuoteResult {
    let result = super.call(
      "querySellQuote",
      "querySellQuote(address,uint256):(uint256,uint256,uint8,uint256)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromUnsignedBigInt(payQuoteAmount)
      ]
    );

    return new DPP__querySellQuoteResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toBigInt()
    );
  }

  try_querySellQuote(
    trader: Address,
    payQuoteAmount: BigInt
  ): ethereum.CallResult<DPP__querySellQuoteResult> {
    let result = super.tryCall(
      "querySellQuote",
      "querySellQuote(address,uint256):(uint256,uint256,uint8,uint256)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromUnsignedBigInt(payQuoteAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DPP__querySellQuoteResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toBigInt()
      )
    );
  }

  reset(
    assetTo: Address,
    newLpFeeRate: BigInt,
    newI: BigInt,
    newK: BigInt,
    baseOutAmount: BigInt,
    quoteOutAmount: BigInt,
    minBaseReserve: BigInt,
    minQuoteReserve: BigInt
  ): boolean {
    let result = super.call(
      "reset",
      "reset(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(assetTo),
        ethereum.Value.fromUnsignedBigInt(newLpFeeRate),
        ethereum.Value.fromUnsignedBigInt(newI),
        ethereum.Value.fromUnsignedBigInt(newK),
        ethereum.Value.fromUnsignedBigInt(baseOutAmount),
        ethereum.Value.fromUnsignedBigInt(quoteOutAmount),
        ethereum.Value.fromUnsignedBigInt(minBaseReserve),
        ethereum.Value.fromUnsignedBigInt(minQuoteReserve)
      ]
    );

    return result[0].toBoolean();
  }

  try_reset(
    assetTo: Address,
    newLpFeeRate: BigInt,
    newI: BigInt,
    newK: BigInt,
    baseOutAmount: BigInt,
    quoteOutAmount: BigInt,
    minBaseReserve: BigInt,
    minQuoteReserve: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "reset",
      "reset(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(assetTo),
        ethereum.Value.fromUnsignedBigInt(newLpFeeRate),
        ethereum.Value.fromUnsignedBigInt(newI),
        ethereum.Value.fromUnsignedBigInt(newK),
        ethereum.Value.fromUnsignedBigInt(baseOutAmount),
        ethereum.Value.fromUnsignedBigInt(quoteOutAmount),
        ethereum.Value.fromUnsignedBigInt(minBaseReserve),
        ethereum.Value.fromUnsignedBigInt(minQuoteReserve)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  sellBase(to: Address): BigInt {
    let result = super.call("sellBase", "sellBase(address):(uint256)", [
      ethereum.Value.fromAddress(to)
    ]);

    return result[0].toBigInt();
  }

  try_sellBase(to: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sellBase", "sellBase(address):(uint256)", [
      ethereum.Value.fromAddress(to)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sellQuote(to: Address): BigInt {
    let result = super.call("sellQuote", "sellQuote(address):(uint256)", [
      ethereum.Value.fromAddress(to)
    ]);

    return result[0].toBigInt();
  }

  try_sellQuote(to: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sellQuote", "sellQuote(address):(uint256)", [
      ethereum.Value.fromAddress(to)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ClaimOwnershipCall extends ethereum.Call {
  get inputs(): ClaimOwnershipCall__Inputs {
    return new ClaimOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimOwnershipCall__Outputs {
    return new ClaimOwnershipCall__Outputs(this);
  }
}

export class ClaimOwnershipCall__Inputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall__Outputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class FlashLoanCall extends ethereum.Call {
  get inputs(): FlashLoanCall__Inputs {
    return new FlashLoanCall__Inputs(this);
  }

  get outputs(): FlashLoanCall__Outputs {
    return new FlashLoanCall__Outputs(this);
  }
}

export class FlashLoanCall__Inputs {
  _call: FlashLoanCall;

  constructor(call: FlashLoanCall) {
    this._call = call;
  }

  get baseAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get quoteAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get assetTo(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class FlashLoanCall__Outputs {
  _call: FlashLoanCall;

  constructor(call: FlashLoanCall) {
    this._call = call;
  }
}

export class InitOwnerCall extends ethereum.Call {
  get inputs(): InitOwnerCall__Inputs {
    return new InitOwnerCall__Inputs(this);
  }

  get outputs(): InitOwnerCall__Outputs {
    return new InitOwnerCall__Outputs(this);
  }
}

export class InitOwnerCall__Inputs {
  _call: InitOwnerCall;

  constructor(call: InitOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitOwnerCall__Outputs {
  _call: InitOwnerCall;

  constructor(call: InitOwnerCall) {
    this._call = call;
  }
}

export class RatioSyncCall extends ethereum.Call {
  get inputs(): RatioSyncCall__Inputs {
    return new RatioSyncCall__Inputs(this);
  }

  get outputs(): RatioSyncCall__Outputs {
    return new RatioSyncCall__Outputs(this);
  }
}

export class RatioSyncCall__Inputs {
  _call: RatioSyncCall;

  constructor(call: RatioSyncCall) {
    this._call = call;
  }
}

export class RatioSyncCall__Outputs {
  _call: RatioSyncCall;

  constructor(call: RatioSyncCall) {
    this._call = call;
  }
}

export class ResetCall extends ethereum.Call {
  get inputs(): ResetCall__Inputs {
    return new ResetCall__Inputs(this);
  }

  get outputs(): ResetCall__Outputs {
    return new ResetCall__Outputs(this);
  }
}

export class ResetCall__Inputs {
  _call: ResetCall;

  constructor(call: ResetCall) {
    this._call = call;
  }

  get assetTo(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newLpFeeRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get newI(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get newK(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get baseOutAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get quoteOutAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get minBaseReserve(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get minQuoteReserve(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class ResetCall__Outputs {
  _call: ResetCall;

  constructor(call: ResetCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RetrieveCall extends ethereum.Call {
  get inputs(): RetrieveCall__Inputs {
    return new RetrieveCall__Inputs(this);
  }

  get outputs(): RetrieveCall__Outputs {
    return new RetrieveCall__Outputs(this);
  }
}

export class RetrieveCall__Inputs {
  _call: RetrieveCall;

  constructor(call: RetrieveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RetrieveCall__Outputs {
  _call: RetrieveCall;

  constructor(call: RetrieveCall) {
    this._call = call;
  }
}

export class SellBaseCall extends ethereum.Call {
  get inputs(): SellBaseCall__Inputs {
    return new SellBaseCall__Inputs(this);
  }

  get outputs(): SellBaseCall__Outputs {
    return new SellBaseCall__Outputs(this);
  }
}

export class SellBaseCall__Inputs {
  _call: SellBaseCall;

  constructor(call: SellBaseCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SellBaseCall__Outputs {
  _call: SellBaseCall;

  constructor(call: SellBaseCall) {
    this._call = call;
  }

  get receiveQuoteAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SellQuoteCall extends ethereum.Call {
  get inputs(): SellQuoteCall__Inputs {
    return new SellQuoteCall__Inputs(this);
  }

  get outputs(): SellQuoteCall__Outputs {
    return new SellQuoteCall__Outputs(this);
  }
}

export class SellQuoteCall__Inputs {
  _call: SellQuoteCall;

  constructor(call: SellQuoteCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SellQuoteCall__Outputs {
  _call: SellQuoteCall;

  constructor(call: SellQuoteCall) {
    this._call = call;
  }

  get receiveBaseAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get maintainer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get baseTokenAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get quoteTokenAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get lpFeeRate(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get mtFeeRateModel(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get k(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get i(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get isOpenTWAP(): boolean {
    return this._call.inputValues[8].value.toBoolean();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}
