// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BuyBaseToken extends ethereum.Event {
  get params(): BuyBaseToken__Params {
    return new BuyBaseToken__Params(this);
  }
}

export class BuyBaseToken__Params {
  _event: BuyBaseToken;

  constructor(event: BuyBaseToken) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiveBase(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get payQuote(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ChargeMaintainerFee extends ethereum.Event {
  get params(): ChargeMaintainerFee__Params {
    return new ChargeMaintainerFee__Params(this);
  }
}

export class ChargeMaintainerFee__Params {
  _event: ChargeMaintainerFee;

  constructor(event: ChargeMaintainerFee) {
    this._event = event;
  }

  get maintainer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isBaseToken(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ChargePenalty extends ethereum.Event {
  get params(): ChargePenalty__Params {
    return new ChargePenalty__Params(this);
  }
}

export class ChargePenalty__Params {
  _event: ChargePenalty;

  constructor(event: ChargePenalty) {
    this._event = event;
  }

  get payer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isBaseToken(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ClaimAssets extends ethereum.Event {
  get params(): ClaimAssets__Params {
    return new ClaimAssets__Params(this);
  }
}

export class ClaimAssets__Params {
  _event: ClaimAssets;

  constructor(event: ClaimAssets) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get baseTokenAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get quoteTokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get payer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get isBaseToken(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get lpTokenAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Donate extends ethereum.Event {
  get params(): Donate__Params {
    return new Donate__Params(this);
  }
}

export class Donate__Params {
  _event: Donate;

  constructor(event: Donate) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get isBaseToken(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class OwnershipTransferPrepared extends ethereum.Event {
  get params(): OwnershipTransferPrepared__Params {
    return new OwnershipTransferPrepared__Params(this);
  }
}

export class OwnershipTransferPrepared__Params {
  _event: OwnershipTransferPrepared;

  constructor(event: OwnershipTransferPrepared) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SellBaseToken extends ethereum.Event {
  get params(): SellBaseToken__Params {
    return new SellBaseToken__Params(this);
  }
}

export class SellBaseToken__Params {
  _event: SellBaseToken;

  constructor(event: SellBaseToken) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get payBase(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get receiveQuote(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateGasPriceLimit extends ethereum.Event {
  get params(): UpdateGasPriceLimit__Params {
    return new UpdateGasPriceLimit__Params(this);
  }
}

export class UpdateGasPriceLimit__Params {
  _event: UpdateGasPriceLimit;

  constructor(event: UpdateGasPriceLimit) {
    this._event = event;
  }

  get oldGasPriceLimit(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newGasPriceLimit(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateK extends ethereum.Event {
  get params(): UpdateK__Params {
    return new UpdateK__Params(this);
  }
}

export class UpdateK__Params {
  _event: UpdateK;

  constructor(event: UpdateK) {
    this._event = event;
  }

  get oldK(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newK(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateLiquidityProviderFeeRate extends ethereum.Event {
  get params(): UpdateLiquidityProviderFeeRate__Params {
    return new UpdateLiquidityProviderFeeRate__Params(this);
  }
}

export class UpdateLiquidityProviderFeeRate__Params {
  _event: UpdateLiquidityProviderFeeRate;

  constructor(event: UpdateLiquidityProviderFeeRate) {
    this._event = event;
  }

  get oldLiquidityProviderFeeRate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newLiquidityProviderFeeRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateMaintainerFeeRate extends ethereum.Event {
  get params(): UpdateMaintainerFeeRate__Params {
    return new UpdateMaintainerFeeRate__Params(this);
  }
}

export class UpdateMaintainerFeeRate__Params {
  _event: UpdateMaintainerFeeRate;

  constructor(event: UpdateMaintainerFeeRate) {
    this._event = event;
  }

  get oldMaintainerFeeRate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newMaintainerFeeRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get payer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get isBaseToken(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get lpTokenAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class DODO__getExpectedTargetResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DODO extends ethereum.SmartContract {
  static bind(address: Address): DODO {
    return new DODO("DODO", address);
  }

  _BASE_BALANCE_(): BigInt {
    let result = super.call("_BASE_BALANCE_", "_BASE_BALANCE_():(uint256)", []);

    return result[0].toBigInt();
  }

  try__BASE_BALANCE_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_BASE_BALANCE_",
      "_BASE_BALANCE_():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _BASE_CAPITAL_RECEIVE_QUOTE_(): BigInt {
    let result = super.call(
      "_BASE_CAPITAL_RECEIVE_QUOTE_",
      "_BASE_CAPITAL_RECEIVE_QUOTE_():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__BASE_CAPITAL_RECEIVE_QUOTE_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_BASE_CAPITAL_RECEIVE_QUOTE_",
      "_BASE_CAPITAL_RECEIVE_QUOTE_():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _BASE_CAPITAL_TOKEN_(): Address {
    let result = super.call(
      "_BASE_CAPITAL_TOKEN_",
      "_BASE_CAPITAL_TOKEN_():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__BASE_CAPITAL_TOKEN_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_BASE_CAPITAL_TOKEN_",
      "_BASE_CAPITAL_TOKEN_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _BASE_TOKEN_(): Address {
    let result = super.call("_BASE_TOKEN_", "_BASE_TOKEN_():(address)", []);

    return result[0].toAddress();
  }

  try__BASE_TOKEN_(): ethereum.CallResult<Address> {
    let result = super.tryCall("_BASE_TOKEN_", "_BASE_TOKEN_():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _CLAIMED_(param0: Address): boolean {
    let result = super.call("_CLAIMED_", "_CLAIMED_(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try__CLAIMED_(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("_CLAIMED_", "_CLAIMED_(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _CLOSED_(): boolean {
    let result = super.call("_CLOSED_", "_CLOSED_():(bool)", []);

    return result[0].toBoolean();
  }

  try__CLOSED_(): ethereum.CallResult<boolean> {
    let result = super.tryCall("_CLOSED_", "_CLOSED_():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _DEPOSIT_BASE_ALLOWED_(): boolean {
    let result = super.call(
      "_DEPOSIT_BASE_ALLOWED_",
      "_DEPOSIT_BASE_ALLOWED_():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try__DEPOSIT_BASE_ALLOWED_(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_DEPOSIT_BASE_ALLOWED_",
      "_DEPOSIT_BASE_ALLOWED_():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _DEPOSIT_QUOTE_ALLOWED_(): boolean {
    let result = super.call(
      "_DEPOSIT_QUOTE_ALLOWED_",
      "_DEPOSIT_QUOTE_ALLOWED_():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try__DEPOSIT_QUOTE_ALLOWED_(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_DEPOSIT_QUOTE_ALLOWED_",
      "_DEPOSIT_QUOTE_ALLOWED_():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _GAS_PRICE_LIMIT_(): BigInt {
    let result = super.call(
      "_GAS_PRICE_LIMIT_",
      "_GAS_PRICE_LIMIT_():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__GAS_PRICE_LIMIT_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_GAS_PRICE_LIMIT_",
      "_GAS_PRICE_LIMIT_():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _K_(): BigInt {
    let result = super.call("_K_", "_K_():(uint256)", []);

    return result[0].toBigInt();
  }

  try__K_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_K_", "_K_():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _LP_FEE_RATE_(): BigInt {
    let result = super.call("_LP_FEE_RATE_", "_LP_FEE_RATE_():(uint256)", []);

    return result[0].toBigInt();
  }

  try__LP_FEE_RATE_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_LP_FEE_RATE_",
      "_LP_FEE_RATE_():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _MAINTAINER_(): Address {
    let result = super.call("_MAINTAINER_", "_MAINTAINER_():(address)", []);

    return result[0].toAddress();
  }

  try__MAINTAINER_(): ethereum.CallResult<Address> {
    let result = super.tryCall("_MAINTAINER_", "_MAINTAINER_():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _MT_FEE_RATE_(): BigInt {
    let result = super.call("_MT_FEE_RATE_", "_MT_FEE_RATE_():(uint256)", []);

    return result[0].toBigInt();
  }

  try__MT_FEE_RATE_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_MT_FEE_RATE_",
      "_MT_FEE_RATE_():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _NEW_OWNER_(): Address {
    let result = super.call("_NEW_OWNER_", "_NEW_OWNER_():(address)", []);

    return result[0].toAddress();
  }

  try__NEW_OWNER_(): ethereum.CallResult<Address> {
    let result = super.tryCall("_NEW_OWNER_", "_NEW_OWNER_():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _ORACLE_(): Address {
    let result = super.call("_ORACLE_", "_ORACLE_():(address)", []);

    return result[0].toAddress();
  }

  try__ORACLE_(): ethereum.CallResult<Address> {
    let result = super.tryCall("_ORACLE_", "_ORACLE_():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _OWNER_(): Address {
    let result = super.call("_OWNER_", "_OWNER_():(address)", []);

    return result[0].toAddress();
  }

  try__OWNER_(): ethereum.CallResult<Address> {
    let result = super.tryCall("_OWNER_", "_OWNER_():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _QUOTE_BALANCE_(): BigInt {
    let result = super.call(
      "_QUOTE_BALANCE_",
      "_QUOTE_BALANCE_():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__QUOTE_BALANCE_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_QUOTE_BALANCE_",
      "_QUOTE_BALANCE_():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _QUOTE_CAPITAL_RECEIVE_BASE_(): BigInt {
    let result = super.call(
      "_QUOTE_CAPITAL_RECEIVE_BASE_",
      "_QUOTE_CAPITAL_RECEIVE_BASE_():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__QUOTE_CAPITAL_RECEIVE_BASE_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_QUOTE_CAPITAL_RECEIVE_BASE_",
      "_QUOTE_CAPITAL_RECEIVE_BASE_():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _QUOTE_CAPITAL_TOKEN_(): Address {
    let result = super.call(
      "_QUOTE_CAPITAL_TOKEN_",
      "_QUOTE_CAPITAL_TOKEN_():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__QUOTE_CAPITAL_TOKEN_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_QUOTE_CAPITAL_TOKEN_",
      "_QUOTE_CAPITAL_TOKEN_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _QUOTE_TOKEN_(): Address {
    let result = super.call("_QUOTE_TOKEN_", "_QUOTE_TOKEN_():(address)", []);

    return result[0].toAddress();
  }

  try__QUOTE_TOKEN_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_QUOTE_TOKEN_",
      "_QUOTE_TOKEN_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _R_STATUS_(): i32 {
    let result = super.call("_R_STATUS_", "_R_STATUS_():(uint8)", []);

    return result[0].toI32();
  }

  try__R_STATUS_(): ethereum.CallResult<i32> {
    let result = super.tryCall("_R_STATUS_", "_R_STATUS_():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  _SUPERVISOR_(): Address {
    let result = super.call("_SUPERVISOR_", "_SUPERVISOR_():(address)", []);

    return result[0].toAddress();
  }

  try__SUPERVISOR_(): ethereum.CallResult<Address> {
    let result = super.tryCall("_SUPERVISOR_", "_SUPERVISOR_():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _TARGET_BASE_TOKEN_AMOUNT_(): BigInt {
    let result = super.call(
      "_TARGET_BASE_TOKEN_AMOUNT_",
      "_TARGET_BASE_TOKEN_AMOUNT_():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__TARGET_BASE_TOKEN_AMOUNT_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_TARGET_BASE_TOKEN_AMOUNT_",
      "_TARGET_BASE_TOKEN_AMOUNT_():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _TARGET_QUOTE_TOKEN_AMOUNT_(): BigInt {
    let result = super.call(
      "_TARGET_QUOTE_TOKEN_AMOUNT_",
      "_TARGET_QUOTE_TOKEN_AMOUNT_():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__TARGET_QUOTE_TOKEN_AMOUNT_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_TARGET_QUOTE_TOKEN_AMOUNT_",
      "_TARGET_QUOTE_TOKEN_AMOUNT_():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _TRADE_ALLOWED_(): boolean {
    let result = super.call("_TRADE_ALLOWED_", "_TRADE_ALLOWED_():(bool)", []);

    return result[0].toBoolean();
  }

  try__TRADE_ALLOWED_(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_TRADE_ALLOWED_",
      "_TRADE_ALLOWED_():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  buyBaseToken(amount: BigInt, maxPayQuote: BigInt, data: Bytes): BigInt {
    let result = super.call(
      "buyBaseToken",
      "buyBaseToken(uint256,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(maxPayQuote),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBigInt();
  }

  try_buyBaseToken(
    amount: BigInt,
    maxPayQuote: BigInt,
    data: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "buyBaseToken",
      "buyBaseToken(uint256,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(maxPayQuote),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositBase(amount: BigInt): BigInt {
    let result = super.call("depositBase", "depositBase(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_depositBase(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositBase",
      "depositBase(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositBaseTo(to: Address, amount: BigInt): BigInt {
    let result = super.call(
      "depositBaseTo",
      "depositBaseTo(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_depositBaseTo(to: Address, amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositBaseTo",
      "depositBaseTo(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositQuote(amount: BigInt): BigInt {
    let result = super.call("depositQuote", "depositQuote(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_depositQuote(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositQuote",
      "depositQuote(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositQuoteTo(to: Address, amount: BigInt): BigInt {
    let result = super.call(
      "depositQuoteTo",
      "depositQuoteTo(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_depositQuoteTo(to: Address, amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositQuoteTo",
      "depositQuoteTo(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBaseCapitalBalanceOf(lp: Address): BigInt {
    let result = super.call(
      "getBaseCapitalBalanceOf",
      "getBaseCapitalBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(lp)]
    );

    return result[0].toBigInt();
  }

  try_getBaseCapitalBalanceOf(lp: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBaseCapitalBalanceOf",
      "getBaseCapitalBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(lp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getExpectedTarget(): DODO__getExpectedTargetResult {
    let result = super.call(
      "getExpectedTarget",
      "getExpectedTarget():(uint256,uint256)",
      []
    );

    return new DODO__getExpectedTargetResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getExpectedTarget(): ethereum.CallResult<DODO__getExpectedTargetResult> {
    let result = super.tryCall(
      "getExpectedTarget",
      "getExpectedTarget():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DODO__getExpectedTargetResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getLpBaseBalance(lp: Address): BigInt {
    let result = super.call(
      "getLpBaseBalance",
      "getLpBaseBalance(address):(uint256)",
      [ethereum.Value.fromAddress(lp)]
    );

    return result[0].toBigInt();
  }

  try_getLpBaseBalance(lp: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLpBaseBalance",
      "getLpBaseBalance(address):(uint256)",
      [ethereum.Value.fromAddress(lp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLpQuoteBalance(lp: Address): BigInt {
    let result = super.call(
      "getLpQuoteBalance",
      "getLpQuoteBalance(address):(uint256)",
      [ethereum.Value.fromAddress(lp)]
    );

    return result[0].toBigInt();
  }

  try_getLpQuoteBalance(lp: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLpQuoteBalance",
      "getLpQuoteBalance(address):(uint256)",
      [ethereum.Value.fromAddress(lp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMidPrice(): BigInt {
    let result = super.call("getMidPrice", "getMidPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getMidPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getMidPrice", "getMidPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOraclePrice(): BigInt {
    let result = super.call("getOraclePrice", "getOraclePrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getOraclePrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOraclePrice",
      "getOraclePrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getQuoteCapitalBalanceOf(lp: Address): BigInt {
    let result = super.call(
      "getQuoteCapitalBalanceOf",
      "getQuoteCapitalBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(lp)]
    );

    return result[0].toBigInt();
  }

  try_getQuoteCapitalBalanceOf(lp: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getQuoteCapitalBalanceOf",
      "getQuoteCapitalBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(lp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalBaseCapital(): BigInt {
    let result = super.call(
      "getTotalBaseCapital",
      "getTotalBaseCapital():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalBaseCapital(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalBaseCapital",
      "getTotalBaseCapital():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalQuoteCapital(): BigInt {
    let result = super.call(
      "getTotalQuoteCapital",
      "getTotalQuoteCapital():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalQuoteCapital(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalQuoteCapital",
      "getTotalQuoteCapital():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWithdrawBasePenalty(amount: BigInt): BigInt {
    let result = super.call(
      "getWithdrawBasePenalty",
      "getWithdrawBasePenalty(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return result[0].toBigInt();
  }

  try_getWithdrawBasePenalty(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getWithdrawBasePenalty",
      "getWithdrawBasePenalty(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWithdrawQuotePenalty(amount: BigInt): BigInt {
    let result = super.call(
      "getWithdrawQuotePenalty",
      "getWithdrawQuotePenalty(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return result[0].toBigInt();
  }

  try_getWithdrawQuotePenalty(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getWithdrawQuotePenalty",
      "getWithdrawQuotePenalty(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  queryBuyBaseToken(amount: BigInt): BigInt {
    let result = super.call(
      "queryBuyBaseToken",
      "queryBuyBaseToken(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return result[0].toBigInt();
  }

  try_queryBuyBaseToken(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "queryBuyBaseToken",
      "queryBuyBaseToken(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  querySellBaseToken(amount: BigInt): BigInt {
    let result = super.call(
      "querySellBaseToken",
      "querySellBaseToken(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return result[0].toBigInt();
  }

  try_querySellBaseToken(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "querySellBaseToken",
      "querySellBaseToken(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sellBaseToken(amount: BigInt, minReceiveQuote: BigInt, data: Bytes): BigInt {
    let result = super.call(
      "sellBaseToken",
      "sellBaseToken(uint256,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(minReceiveQuote),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBigInt();
  }

  try_sellBaseToken(
    amount: BigInt,
    minReceiveQuote: BigInt,
    data: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sellBaseToken",
      "sellBaseToken(uint256,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(minReceiveQuote),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  version(): BigInt {
    let result = super.call("version", "version():(uint256)", []);

    return result[0].toBigInt();
  }

  try_version(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("version", "version():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawAllBase(): BigInt {
    let result = super.call(
      "withdrawAllBase",
      "withdrawAllBase():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_withdrawAllBase(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawAllBase",
      "withdrawAllBase():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawAllBaseTo(to: Address): BigInt {
    let result = super.call(
      "withdrawAllBaseTo",
      "withdrawAllBaseTo(address):(uint256)",
      [ethereum.Value.fromAddress(to)]
    );

    return result[0].toBigInt();
  }

  try_withdrawAllBaseTo(to: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawAllBaseTo",
      "withdrawAllBaseTo(address):(uint256)",
      [ethereum.Value.fromAddress(to)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawAllQuote(): BigInt {
    let result = super.call(
      "withdrawAllQuote",
      "withdrawAllQuote():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_withdrawAllQuote(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawAllQuote",
      "withdrawAllQuote():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawAllQuoteTo(to: Address): BigInt {
    let result = super.call(
      "withdrawAllQuoteTo",
      "withdrawAllQuoteTo(address):(uint256)",
      [ethereum.Value.fromAddress(to)]
    );

    return result[0].toBigInt();
  }

  try_withdrawAllQuoteTo(to: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawAllQuoteTo",
      "withdrawAllQuoteTo(address):(uint256)",
      [ethereum.Value.fromAddress(to)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawBase(amount: BigInt): BigInt {
    let result = super.call("withdrawBase", "withdrawBase(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_withdrawBase(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawBase",
      "withdrawBase(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawBaseTo(to: Address, amount: BigInt): BigInt {
    let result = super.call(
      "withdrawBaseTo",
      "withdrawBaseTo(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawBaseTo(to: Address, amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawBaseTo",
      "withdrawBaseTo(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawQuote(amount: BigInt): BigInt {
    let result = super.call(
      "withdrawQuote",
      "withdrawQuote(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return result[0].toBigInt();
  }

  try_withdrawQuote(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawQuote",
      "withdrawQuote(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawQuoteTo(to: Address, amount: BigInt): BigInt {
    let result = super.call(
      "withdrawQuoteTo",
      "withdrawQuoteTo(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawQuoteTo(
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawQuoteTo",
      "withdrawQuoteTo(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class BuyBaseTokenCall extends ethereum.Call {
  get inputs(): BuyBaseTokenCall__Inputs {
    return new BuyBaseTokenCall__Inputs(this);
  }

  get outputs(): BuyBaseTokenCall__Outputs {
    return new BuyBaseTokenCall__Outputs(this);
  }
}

export class BuyBaseTokenCall__Inputs {
  _call: BuyBaseTokenCall;

  constructor(call: BuyBaseTokenCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxPayQuote(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class BuyBaseTokenCall__Outputs {
  _call: BuyBaseTokenCall;

  constructor(call: BuyBaseTokenCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimAssetsCall extends ethereum.Call {
  get inputs(): ClaimAssetsCall__Inputs {
    return new ClaimAssetsCall__Inputs(this);
  }

  get outputs(): ClaimAssetsCall__Outputs {
    return new ClaimAssetsCall__Outputs(this);
  }
}

export class ClaimAssetsCall__Inputs {
  _call: ClaimAssetsCall;

  constructor(call: ClaimAssetsCall) {
    this._call = call;
  }
}

export class ClaimAssetsCall__Outputs {
  _call: ClaimAssetsCall;

  constructor(call: ClaimAssetsCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall extends ethereum.Call {
  get inputs(): ClaimOwnershipCall__Inputs {
    return new ClaimOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimOwnershipCall__Outputs {
    return new ClaimOwnershipCall__Outputs(this);
  }
}

export class ClaimOwnershipCall__Inputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall__Outputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class DepositBaseCall extends ethereum.Call {
  get inputs(): DepositBaseCall__Inputs {
    return new DepositBaseCall__Inputs(this);
  }

  get outputs(): DepositBaseCall__Outputs {
    return new DepositBaseCall__Outputs(this);
  }
}

export class DepositBaseCall__Inputs {
  _call: DepositBaseCall;

  constructor(call: DepositBaseCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositBaseCall__Outputs {
  _call: DepositBaseCall;

  constructor(call: DepositBaseCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositBaseToCall extends ethereum.Call {
  get inputs(): DepositBaseToCall__Inputs {
    return new DepositBaseToCall__Inputs(this);
  }

  get outputs(): DepositBaseToCall__Outputs {
    return new DepositBaseToCall__Outputs(this);
  }
}

export class DepositBaseToCall__Inputs {
  _call: DepositBaseToCall;

  constructor(call: DepositBaseToCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositBaseToCall__Outputs {
  _call: DepositBaseToCall;

  constructor(call: DepositBaseToCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositQuoteCall extends ethereum.Call {
  get inputs(): DepositQuoteCall__Inputs {
    return new DepositQuoteCall__Inputs(this);
  }

  get outputs(): DepositQuoteCall__Outputs {
    return new DepositQuoteCall__Outputs(this);
  }
}

export class DepositQuoteCall__Inputs {
  _call: DepositQuoteCall;

  constructor(call: DepositQuoteCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositQuoteCall__Outputs {
  _call: DepositQuoteCall;

  constructor(call: DepositQuoteCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositQuoteToCall extends ethereum.Call {
  get inputs(): DepositQuoteToCall__Inputs {
    return new DepositQuoteToCall__Inputs(this);
  }

  get outputs(): DepositQuoteToCall__Outputs {
    return new DepositQuoteToCall__Outputs(this);
  }
}

export class DepositQuoteToCall__Inputs {
  _call: DepositQuoteToCall;

  constructor(call: DepositQuoteToCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositQuoteToCall__Outputs {
  _call: DepositQuoteToCall;

  constructor(call: DepositQuoteToCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DisableBaseDepositCall extends ethereum.Call {
  get inputs(): DisableBaseDepositCall__Inputs {
    return new DisableBaseDepositCall__Inputs(this);
  }

  get outputs(): DisableBaseDepositCall__Outputs {
    return new DisableBaseDepositCall__Outputs(this);
  }
}

export class DisableBaseDepositCall__Inputs {
  _call: DisableBaseDepositCall;

  constructor(call: DisableBaseDepositCall) {
    this._call = call;
  }
}

export class DisableBaseDepositCall__Outputs {
  _call: DisableBaseDepositCall;

  constructor(call: DisableBaseDepositCall) {
    this._call = call;
  }
}

export class DisableQuoteDepositCall extends ethereum.Call {
  get inputs(): DisableQuoteDepositCall__Inputs {
    return new DisableQuoteDepositCall__Inputs(this);
  }

  get outputs(): DisableQuoteDepositCall__Outputs {
    return new DisableQuoteDepositCall__Outputs(this);
  }
}

export class DisableQuoteDepositCall__Inputs {
  _call: DisableQuoteDepositCall;

  constructor(call: DisableQuoteDepositCall) {
    this._call = call;
  }
}

export class DisableQuoteDepositCall__Outputs {
  _call: DisableQuoteDepositCall;

  constructor(call: DisableQuoteDepositCall) {
    this._call = call;
  }
}

export class DisableTradingCall extends ethereum.Call {
  get inputs(): DisableTradingCall__Inputs {
    return new DisableTradingCall__Inputs(this);
  }

  get outputs(): DisableTradingCall__Outputs {
    return new DisableTradingCall__Outputs(this);
  }
}

export class DisableTradingCall__Inputs {
  _call: DisableTradingCall;

  constructor(call: DisableTradingCall) {
    this._call = call;
  }
}

export class DisableTradingCall__Outputs {
  _call: DisableTradingCall;

  constructor(call: DisableTradingCall) {
    this._call = call;
  }
}

export class DonateBaseTokenCall extends ethereum.Call {
  get inputs(): DonateBaseTokenCall__Inputs {
    return new DonateBaseTokenCall__Inputs(this);
  }

  get outputs(): DonateBaseTokenCall__Outputs {
    return new DonateBaseTokenCall__Outputs(this);
  }
}

export class DonateBaseTokenCall__Inputs {
  _call: DonateBaseTokenCall;

  constructor(call: DonateBaseTokenCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DonateBaseTokenCall__Outputs {
  _call: DonateBaseTokenCall;

  constructor(call: DonateBaseTokenCall) {
    this._call = call;
  }
}

export class DonateQuoteTokenCall extends ethereum.Call {
  get inputs(): DonateQuoteTokenCall__Inputs {
    return new DonateQuoteTokenCall__Inputs(this);
  }

  get outputs(): DonateQuoteTokenCall__Outputs {
    return new DonateQuoteTokenCall__Outputs(this);
  }
}

export class DonateQuoteTokenCall__Inputs {
  _call: DonateQuoteTokenCall;

  constructor(call: DonateQuoteTokenCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DonateQuoteTokenCall__Outputs {
  _call: DonateQuoteTokenCall;

  constructor(call: DonateQuoteTokenCall) {
    this._call = call;
  }
}

export class EnableBaseDepositCall extends ethereum.Call {
  get inputs(): EnableBaseDepositCall__Inputs {
    return new EnableBaseDepositCall__Inputs(this);
  }

  get outputs(): EnableBaseDepositCall__Outputs {
    return new EnableBaseDepositCall__Outputs(this);
  }
}

export class EnableBaseDepositCall__Inputs {
  _call: EnableBaseDepositCall;

  constructor(call: EnableBaseDepositCall) {
    this._call = call;
  }
}

export class EnableBaseDepositCall__Outputs {
  _call: EnableBaseDepositCall;

  constructor(call: EnableBaseDepositCall) {
    this._call = call;
  }
}

export class EnableQuoteDepositCall extends ethereum.Call {
  get inputs(): EnableQuoteDepositCall__Inputs {
    return new EnableQuoteDepositCall__Inputs(this);
  }

  get outputs(): EnableQuoteDepositCall__Outputs {
    return new EnableQuoteDepositCall__Outputs(this);
  }
}

export class EnableQuoteDepositCall__Inputs {
  _call: EnableQuoteDepositCall;

  constructor(call: EnableQuoteDepositCall) {
    this._call = call;
  }
}

export class EnableQuoteDepositCall__Outputs {
  _call: EnableQuoteDepositCall;

  constructor(call: EnableQuoteDepositCall) {
    this._call = call;
  }
}

export class EnableTradingCall extends ethereum.Call {
  get inputs(): EnableTradingCall__Inputs {
    return new EnableTradingCall__Inputs(this);
  }

  get outputs(): EnableTradingCall__Outputs {
    return new EnableTradingCall__Outputs(this);
  }
}

export class EnableTradingCall__Inputs {
  _call: EnableTradingCall;

  constructor(call: EnableTradingCall) {
    this._call = call;
  }
}

export class EnableTradingCall__Outputs {
  _call: EnableTradingCall;

  constructor(call: EnableTradingCall) {
    this._call = call;
  }
}

export class FinalSettlementCall extends ethereum.Call {
  get inputs(): FinalSettlementCall__Inputs {
    return new FinalSettlementCall__Inputs(this);
  }

  get outputs(): FinalSettlementCall__Outputs {
    return new FinalSettlementCall__Outputs(this);
  }
}

export class FinalSettlementCall__Inputs {
  _call: FinalSettlementCall;

  constructor(call: FinalSettlementCall) {
    this._call = call;
  }
}

export class FinalSettlementCall__Outputs {
  _call: FinalSettlementCall;

  constructor(call: FinalSettlementCall) {
    this._call = call;
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get supervisor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get maintainer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get baseToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get quoteToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get oracle(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get lpFeeRate(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get mtFeeRate(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get k(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get gasPriceLimit(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class RetrieveCall extends ethereum.Call {
  get inputs(): RetrieveCall__Inputs {
    return new RetrieveCall__Inputs(this);
  }

  get outputs(): RetrieveCall__Outputs {
    return new RetrieveCall__Outputs(this);
  }
}

export class RetrieveCall__Inputs {
  _call: RetrieveCall;

  constructor(call: RetrieveCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RetrieveCall__Outputs {
  _call: RetrieveCall;

  constructor(call: RetrieveCall) {
    this._call = call;
  }
}

export class SellBaseTokenCall extends ethereum.Call {
  get inputs(): SellBaseTokenCall__Inputs {
    return new SellBaseTokenCall__Inputs(this);
  }

  get outputs(): SellBaseTokenCall__Outputs {
    return new SellBaseTokenCall__Outputs(this);
  }
}

export class SellBaseTokenCall__Inputs {
  _call: SellBaseTokenCall;

  constructor(call: SellBaseTokenCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minReceiveQuote(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SellBaseTokenCall__Outputs {
  _call: SellBaseTokenCall;

  constructor(call: SellBaseTokenCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetGasPriceLimitCall extends ethereum.Call {
  get inputs(): SetGasPriceLimitCall__Inputs {
    return new SetGasPriceLimitCall__Inputs(this);
  }

  get outputs(): SetGasPriceLimitCall__Outputs {
    return new SetGasPriceLimitCall__Outputs(this);
  }
}

export class SetGasPriceLimitCall__Inputs {
  _call: SetGasPriceLimitCall;

  constructor(call: SetGasPriceLimitCall) {
    this._call = call;
  }

  get newGasPriceLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetGasPriceLimitCall__Outputs {
  _call: SetGasPriceLimitCall;

  constructor(call: SetGasPriceLimitCall) {
    this._call = call;
  }
}

export class SetKCall extends ethereum.Call {
  get inputs(): SetKCall__Inputs {
    return new SetKCall__Inputs(this);
  }

  get outputs(): SetKCall__Outputs {
    return new SetKCall__Outputs(this);
  }
}

export class SetKCall__Inputs {
  _call: SetKCall;

  constructor(call: SetKCall) {
    this._call = call;
  }

  get newK(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetKCall__Outputs {
  _call: SetKCall;

  constructor(call: SetKCall) {
    this._call = call;
  }
}

export class SetLiquidityProviderFeeRateCall extends ethereum.Call {
  get inputs(): SetLiquidityProviderFeeRateCall__Inputs {
    return new SetLiquidityProviderFeeRateCall__Inputs(this);
  }

  get outputs(): SetLiquidityProviderFeeRateCall__Outputs {
    return new SetLiquidityProviderFeeRateCall__Outputs(this);
  }
}

export class SetLiquidityProviderFeeRateCall__Inputs {
  _call: SetLiquidityProviderFeeRateCall;

  constructor(call: SetLiquidityProviderFeeRateCall) {
    this._call = call;
  }

  get newLiquidityPorviderFeeRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLiquidityProviderFeeRateCall__Outputs {
  _call: SetLiquidityProviderFeeRateCall;

  constructor(call: SetLiquidityProviderFeeRateCall) {
    this._call = call;
  }
}

export class SetMaintainerCall extends ethereum.Call {
  get inputs(): SetMaintainerCall__Inputs {
    return new SetMaintainerCall__Inputs(this);
  }

  get outputs(): SetMaintainerCall__Outputs {
    return new SetMaintainerCall__Outputs(this);
  }
}

export class SetMaintainerCall__Inputs {
  _call: SetMaintainerCall;

  constructor(call: SetMaintainerCall) {
    this._call = call;
  }

  get newMaintainer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMaintainerCall__Outputs {
  _call: SetMaintainerCall;

  constructor(call: SetMaintainerCall) {
    this._call = call;
  }
}

export class SetMaintainerFeeRateCall extends ethereum.Call {
  get inputs(): SetMaintainerFeeRateCall__Inputs {
    return new SetMaintainerFeeRateCall__Inputs(this);
  }

  get outputs(): SetMaintainerFeeRateCall__Outputs {
    return new SetMaintainerFeeRateCall__Outputs(this);
  }
}

export class SetMaintainerFeeRateCall__Inputs {
  _call: SetMaintainerFeeRateCall;

  constructor(call: SetMaintainerFeeRateCall) {
    this._call = call;
  }

  get newMaintainerFeeRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaintainerFeeRateCall__Outputs {
  _call: SetMaintainerFeeRateCall;

  constructor(call: SetMaintainerFeeRateCall) {
    this._call = call;
  }
}

export class SetOracleCall extends ethereum.Call {
  get inputs(): SetOracleCall__Inputs {
    return new SetOracleCall__Inputs(this);
  }

  get outputs(): SetOracleCall__Outputs {
    return new SetOracleCall__Outputs(this);
  }
}

export class SetOracleCall__Inputs {
  _call: SetOracleCall;

  constructor(call: SetOracleCall) {
    this._call = call;
  }

  get newOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOracleCall__Outputs {
  _call: SetOracleCall;

  constructor(call: SetOracleCall) {
    this._call = call;
  }
}

export class SetSupervisorCall extends ethereum.Call {
  get inputs(): SetSupervisorCall__Inputs {
    return new SetSupervisorCall__Inputs(this);
  }

  get outputs(): SetSupervisorCall__Outputs {
    return new SetSupervisorCall__Outputs(this);
  }
}

export class SetSupervisorCall__Inputs {
  _call: SetSupervisorCall;

  constructor(call: SetSupervisorCall) {
    this._call = call;
  }

  get newSupervisor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSupervisorCall__Outputs {
  _call: SetSupervisorCall;

  constructor(call: SetSupervisorCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawAllBaseCall extends ethereum.Call {
  get inputs(): WithdrawAllBaseCall__Inputs {
    return new WithdrawAllBaseCall__Inputs(this);
  }

  get outputs(): WithdrawAllBaseCall__Outputs {
    return new WithdrawAllBaseCall__Outputs(this);
  }
}

export class WithdrawAllBaseCall__Inputs {
  _call: WithdrawAllBaseCall;

  constructor(call: WithdrawAllBaseCall) {
    this._call = call;
  }
}

export class WithdrawAllBaseCall__Outputs {
  _call: WithdrawAllBaseCall;

  constructor(call: WithdrawAllBaseCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawAllBaseToCall extends ethereum.Call {
  get inputs(): WithdrawAllBaseToCall__Inputs {
    return new WithdrawAllBaseToCall__Inputs(this);
  }

  get outputs(): WithdrawAllBaseToCall__Outputs {
    return new WithdrawAllBaseToCall__Outputs(this);
  }
}

export class WithdrawAllBaseToCall__Inputs {
  _call: WithdrawAllBaseToCall;

  constructor(call: WithdrawAllBaseToCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawAllBaseToCall__Outputs {
  _call: WithdrawAllBaseToCall;

  constructor(call: WithdrawAllBaseToCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawAllQuoteCall extends ethereum.Call {
  get inputs(): WithdrawAllQuoteCall__Inputs {
    return new WithdrawAllQuoteCall__Inputs(this);
  }

  get outputs(): WithdrawAllQuoteCall__Outputs {
    return new WithdrawAllQuoteCall__Outputs(this);
  }
}

export class WithdrawAllQuoteCall__Inputs {
  _call: WithdrawAllQuoteCall;

  constructor(call: WithdrawAllQuoteCall) {
    this._call = call;
  }
}

export class WithdrawAllQuoteCall__Outputs {
  _call: WithdrawAllQuoteCall;

  constructor(call: WithdrawAllQuoteCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawAllQuoteToCall extends ethereum.Call {
  get inputs(): WithdrawAllQuoteToCall__Inputs {
    return new WithdrawAllQuoteToCall__Inputs(this);
  }

  get outputs(): WithdrawAllQuoteToCall__Outputs {
    return new WithdrawAllQuoteToCall__Outputs(this);
  }
}

export class WithdrawAllQuoteToCall__Inputs {
  _call: WithdrawAllQuoteToCall;

  constructor(call: WithdrawAllQuoteToCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawAllQuoteToCall__Outputs {
  _call: WithdrawAllQuoteToCall;

  constructor(call: WithdrawAllQuoteToCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawBaseCall extends ethereum.Call {
  get inputs(): WithdrawBaseCall__Inputs {
    return new WithdrawBaseCall__Inputs(this);
  }

  get outputs(): WithdrawBaseCall__Outputs {
    return new WithdrawBaseCall__Outputs(this);
  }
}

export class WithdrawBaseCall__Inputs {
  _call: WithdrawBaseCall;

  constructor(call: WithdrawBaseCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawBaseCall__Outputs {
  _call: WithdrawBaseCall;

  constructor(call: WithdrawBaseCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawBaseToCall extends ethereum.Call {
  get inputs(): WithdrawBaseToCall__Inputs {
    return new WithdrawBaseToCall__Inputs(this);
  }

  get outputs(): WithdrawBaseToCall__Outputs {
    return new WithdrawBaseToCall__Outputs(this);
  }
}

export class WithdrawBaseToCall__Inputs {
  _call: WithdrawBaseToCall;

  constructor(call: WithdrawBaseToCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawBaseToCall__Outputs {
  _call: WithdrawBaseToCall;

  constructor(call: WithdrawBaseToCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawQuoteCall extends ethereum.Call {
  get inputs(): WithdrawQuoteCall__Inputs {
    return new WithdrawQuoteCall__Inputs(this);
  }

  get outputs(): WithdrawQuoteCall__Outputs {
    return new WithdrawQuoteCall__Outputs(this);
  }
}

export class WithdrawQuoteCall__Inputs {
  _call: WithdrawQuoteCall;

  constructor(call: WithdrawQuoteCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawQuoteCall__Outputs {
  _call: WithdrawQuoteCall;

  constructor(call: WithdrawQuoteCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawQuoteToCall extends ethereum.Call {
  get inputs(): WithdrawQuoteToCall__Inputs {
    return new WithdrawQuoteToCall__Inputs(this);
  }

  get outputs(): WithdrawQuoteToCall__Outputs {
    return new WithdrawQuoteToCall__Outputs(this);
  }
}

export class WithdrawQuoteToCall__Inputs {
  _call: WithdrawQuoteToCall;

  constructor(call: WithdrawQuoteToCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawQuoteToCall__Outputs {
  _call: WithdrawQuoteToCall;

  constructor(call: WithdrawQuoteToCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
