type NftCollateralVault @entity {
    "vault address"
    id: ID!
    "creator"
    creator: String!
    "name"
    name: String!
    "baseURI"
    baseURI: String!
    "vault nfts"
    vaultNfts:[VaultNft!]
    "owner"
    owner: Bytes!
    "createdAt"
    createdAt: BigInt!
    "updatedAt"
    updatedAt: BigInt!
}

type Nft @entity{
    "nft address"
    id: ID!
    "type(721„ÄÅ1155)"
    type: String
    "creator"
    creator: String
    "baseUrl"
    baseUrl: String
    "createdAt"
    createdAt: BigInt!
    "updatedAt"
    updatedAt: BigInt!
}

type VaultNft @entity{
    "vault address - nft address"
    id: ID!
    "vault"
    vault: NftCollateralVault!
    "nft address"
    nftAddress: String!
    "nft"
    nft: Nft
    "token id"
    tokenID:  BigInt!
    "token amount"
    amount: BigInt!
    "createdAt"
    createdAt: BigInt!
    "updatedAt"
    updatedAt: BigInt!
}

type Fragment @entity{
    "address"
    id: ID!
    "vault"
    vault: NftCollateralVault!
    "name"
    name: String!
    "symbol"
    symbol: String!
    "decimals"
    decimals: BigInt!
    "total supply"
    totalSupply: BigInt!
    "is buyout"
    isBuyOut: Boolean!
    "dvm address"
    dvm: String!
    "feeDistributor address"
    feeDistributor: String
    "initialized"
    initialized: Boolean!
    "quote token address"
    quote: String!
    "vault pre owner"
    vaultPreOwner: String!
    "buyoutTimestamp"
    buyoutTimestamp: BigInt!
    "createdAt"
    createdAt: BigInt!
    "updatedAt"
    updatedAt: BigInt!
}

type User @entity{
    "user address"
    id: ID!
    "createdAt"
    createdAt: BigInt!
    "updatedAt"
    updatedAt: BigInt!
}

type UserNft @entity{
    "user address - nft address"
    id: ID!
    "vault"
    owner: User!
    "nft"
    nft: Nft
    "token id"
    tokenID:  BigInt!
    "token amount"
    amount: BigInt!
    "createdAt"
    createdAt: BigInt!
    "updatedAt"
    updatedAt: BigInt!
}

